<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Candidate Portal - Submitting Resumes " enabled="true">
      <stringProp name="TestPlan.comments">**************************************************************************************************************
*	File name: 0512119CP      SABER Client RespnsiveHyrbrid Submit Job Application 
**	Application: SABER / CP
**	Jmeter 5.0
*	Purpose:
*	This script will log into SABER and execute the following transactions:
*	Invoke application: http://careers-t1.peopleclick.com/careerscp/client_cpresponsivehybrid/external/search.html&quot;
	User Click on Sign Linke to access Login
	Users Enter UserId and PAssword and click on SignIN button
*	User will click on search to view all Jobs 
	User clicks on Page to navigate thru search results
	User clicks Job to view details
	Users clicks on Apply button
	Users enters required information and clicks nexts
	Users Uploads Resumes
	Users clicks next to review Upload and Job Information just entered
	User clicks the link to submit application.
*       User will Logout during a scenario. 
**	Application contacts:	Beck McElroy
*
*	Author:	Mark Medley
************************************************************************************************************/
void SetThinkValues( void )
{
	lr_save_string(&quot;30&quot;, &quot;Think_Portal&quot;);
    lr_save_string(&quot;10&quot;, &quot;Think_Login&quot;);
	lr_save_string(&quot;40&quot;, &quot;Think_Links&quot;);
	lr_save_string(&quot;180&quot;, &quot;Think_MeritInput&quot;);
    lr_save_string(&quot;90&quot;, &quot;Think_BonusInput&quot;);
    lr_save_string(&quot;90&quot;, &quot;Think_CommentsInput&quot;);
    lr_save_string(&quot;90&quot;, &quot;Think_PlanSubmit&quot;);
	lr_save_string(&quot;120&quot;, &quot;Think_ReviewData&quot;);
	lr_save_string(&quot;60&quot;, &quot;Think_ReviewJobs&quot;);
	lr_save_string(&quot;30&quot;, &quot;Think_ReviewCharts&quot;);
	lr_save_string(&quot;120&quot;, &quot;Think_2Min&quot;); //should be 4 minutes 120 / 240 
	lr_save_string(&quot;10&quot;, &quot;Think_Logout&quot;);
	lr_save_string(&quot;10&quot;, &quot;Think_Close&quot;);
	lr_save_string(&quot;180&quot;, &quot;Think_Refresh&quot;);
	lr_save_string(&quot;20&quot;, &quot;Think_Alert&quot;);
</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">careers-t1.peopleclick.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.embedded_url_re">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/search</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Primary Email Addresses" enabled="true">
        <stringProp name="filename">C:\JMeter_5.0\CP\6_27_19_CP_UserIDs_4001.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Pages" enabled="true">
        <stringProp name="filename">C:\JMeter_5.0\CP\62519Pages.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="randomOrder">true</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Prod Docs &amp; Types" enabled="true">
        <stringProp name="TestPlan.comments">Resume Location: C:\JMeter_5.0\CP\Documents

${Type} = doc
${ï»¿DocResume} = ProdDoc3
</stringProp>
        <stringProp name="filename">C:\JMeter_5.0\CP\07_24_19_ProdDocsTypes.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="randomOrder">false</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://rdcdevstats.sandbox.rdc.l:8086/write?db=Performance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">CP</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">99;95;90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Modified_7_24_19_CP.jmx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="052119CP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="TestPlan.comments"># of Threads: 665
25 users every 1 minute (26 minutes = 1,560 seconds for ramp-up) 
Duration: 20 minutes
Including Ramp-up total duration: 46 minutes
Original Script for Andrea&apos;s Local ~ 7/26/19
***Pre-Requisites*** 
1) Change File Upload Path depending on machine I am running
2) Empty 11/12
3) Empty Applicant Database </stringProp>
      </ThreadGroup>
      <hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="true">
          <stringProp name="TestPlan.comments">20 minutes </stringProp>
          <stringProp name="RunTime.seconds">360</stringProp>
        </RunTime>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_00_LP" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">Initial Load Page of Site</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/search/search.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/search/search.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=00_PFTA_CP_LP;PC=search.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=SEARCH" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">SEARCH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=00a_PFTA_CP_LP;PC=search.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="true">
            <stringProp name="TestPlan.comments">1 to 5 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">4000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_01_Signin" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">/*User clicks on Sign In Link.*/</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/registration/loginPage.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/registration/loginPage.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=01_PFTA_CP_SignIn;PC=Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="E-mail Address Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1494133491">E-mail Address</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=01a_PFTA_CP_SignIn;PC=Sign In</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="true">
            <stringProp name="TestPlan.comments">15 to 45 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_02_Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User enters their User ID and Password and selects Submit</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/registration/login.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="com.peopleclick.cp.formdata.USER_AUTH_PASSWORD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.USER_AUTH_PASSWORD</stringProp>
                    <stringProp name="Argument.value">Pa55word1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="linkedin.isSharedApply" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">linkedin.isSharedApply</stringProp>
                    <stringProp name="Argument.value">linkedin.isSharedApply</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="autocompleteoffpassword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">autocompleteoffpassword</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Sign In</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="autocompleteoffusername" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">autocompleteoffusername</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.USER_AUTH_PRIMARYEMAILADDRESS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.USER_AUTH_PRIMARYEMAILADDRESS</stringProp>
                    <stringProp name="Argument.value">${CPPrimaryEmailAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="linkedin.jsonData" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">linkedin.jsonData</stringProp>
                    <stringProp name="Argument.value">linkedin.jsonData</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fromEmailRegistration" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fromEmailRegistration</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.REMEMBER_ME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.REMEMBER_ME</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/registration/login.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=02_PFTA_CP_SignIn;PC=registration/loginPage.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Search Job Openings" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1282464438">Search Job Openings</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=SEARCH" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">SEARCH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=02a_PFTA_CP_SignIn;PC=registration/loginPage.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="true">
            <stringProp name="TestPlan.comments">15 to 45 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_03_Search" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User selects Search for only US Jobs</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/results/searchResult.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_WITHOUTKEYWORDS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_WITHOUTKEYWORDS</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_JP_POSITION_CATEGORY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_JP_POSITION_CATEGORY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_ANYKEYWORDS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_ANYKEYWORDS</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_KEYWORDS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_KEYWORDS</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_EXACTPHRASE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_EXACTPHRASE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="foo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">foo</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_JOBPOSTAGE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_JOBPOSTAGE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.isAdvanced" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.isAdvanced</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.JPM_LOCATION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.JPM_LOCATION</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.hitsPerPage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.hitsPerPage</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_CLIENTREQID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_CLIENTREQID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Search</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SEARCHCRITERIA_ALLKEYWORDS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SEARCHCRITERIA_ALLKEYWORDS</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.JPM_DURATION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.JPM_DURATION</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/results/searchResult.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">836</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/registration/login.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=03_PFTA_CP_Search;PC=results/searchResult.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Current Job Openings Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1853363515">Current Job Openings</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/getJobs" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/getJobs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/results/searchResult.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=03a_PFTA_CP_Search;PC=site/getJobs</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=SEARCHRESULTS" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">SEARCHRESULTS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=03b_PFTA_CP_Search;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="true">
            <stringProp name="TestPlan.comments">10 to 30 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
            <intProp name="ActionProcessor.action">4</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_04_Page" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User Pages through 2, 3, 4, 5 and stops at pages 6-10.</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/getJobs?page=5" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/getJobs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/getJobs?page=5" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${Page2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/getJobs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/results/searchResult.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=04_PFTA_CP_Page;PC=site/getJobs</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Job Post ID" enabled="true">
                <stringProp name="TestPlan.comments">Internal Job Post ID</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">JPID</stringProp>
                <stringProp name="RegexExtractor.regex">identityToken&quot;:&quot;(.*?)_en-us</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Error</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Page Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1024867860">hitsPerPage</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">5 to 10 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
              <stringProp name="RandomTimer.range">10000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_05_ViewJob" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User clicks on Job ID:</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobDetails/jobDetail.html?jobPostId=20434&amp;localeCode=en-us" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="localeCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">localeCode</stringProp>
                    <stringProp name="Argument.value">en-us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobPostId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">jobPostId</stringProp>
                    <stringProp name="Argument.value">${JPID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobDetails/jobDetail.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=05_PFTA_CP_ViewJob;PC=jobDetails/jobDetail.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="View Job Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="806778629">Location:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=JOBDETAILS" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">JOBDETAILS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=05a_PFTA_CP_ViewJob;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">30 - 90 second</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
              <stringProp name="RandomTimer.range">60000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_06_Apply" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User reviews Job Details page for Product Manager and selects button for Apply Now</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobDetails/startJobApp.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Apply Now</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localeCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localeCode</stringProp>
                    <stringProp name="Argument.value">en-us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobPostId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobPostId</stringProp>
                    <stringProp name="Argument.value">${JPID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobDetails/startJobApp.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=06_PFTA_CP_Apply;PC=jobDetails/startJobApp.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Candidate First Name" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CFN</stringProp>
                <stringProp name="RegexExtractor.regex">CAND_FIRSTNAME&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Candidate Last Name" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CLN</stringProp>
                <stringProp name="RegexExtractor.regex">CAND_LASTNAME&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Address" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CADD</stringProp>
                <stringProp name="RegexExtractor.regex">CAND_ADDRESS1&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="City" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CCITY</stringProp>
                <stringProp name="RegexExtractor.regex">CAND_CITY&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Email" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">EMAIL</stringProp>
                <stringProp name="RegexExtractor.regex">CAND_EMAIL1&quot;  value=&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">${EMAIL}</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="First Name" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-58844613">  First Name</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=06a_PFTA_CP_Apply;PC=external/en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">15 to 30 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_07_Next1" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User enter First Name, Address and phone number (if applicable)</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_ADDRESS2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_ADDRESS2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_COUNTRY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_CITY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_CITY</stringProp>
                    <stringProp name="Argument.value">${CCITY}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_EMAIL2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_EMAIL2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_ADDRESS1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_ADDRESS1</stringProp>
                    <stringProp name="Argument.value">${CADD}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MOBILEPHONE__COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MOBILEPHONE__COUNTRY</stringProp>
                    <stringProp name="Argument.value">1|USA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SAVEPROFILE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SAVEPROFILE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__COUNTRY</stringProp>
                    <stringProp name="Argument.value">1|USA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__PHONE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__PHONE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__ID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_PREFERRED_NAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_PREFERRED_NAME</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_STATEPROVINCE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_STATEPROVINCE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_HOMEPHONE__COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_HOMEPHONE__COUNTRY</stringProp>
                    <stringProp name="Argument.value">1|USA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MOBILEPHONE__PHONE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MOBILEPHONE__PHONE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_FIRSTNAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_FIRSTNAME</stringProp>
                    <stringProp name="Argument.value">${CFN}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_CONTACTMETHOD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_CONTACTMETHOD</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_HOMEPHONE__PHONE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_HOMEPHONE__PHONE</stringProp>
                    <stringProp name="Argument.value">(999) 999-9999</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__EXTENSION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__EXTENSION</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MOBILEPHONE__ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MOBILEPHONE__ID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_LASTNAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_LASTNAME</stringProp>
                    <stringProp name="Argument.value">${CLN}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MIDDLENAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MIDDLENAME</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_HOMEPHONE__ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_HOMEPHONE__ID</stringProp>
                    <stringProp name="Argument.value">1530</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_POSTALCODE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_POSTALCODE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_EMAIL1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_EMAIL1</stringProp>
                    <stringProp name="Argument.value">${CPPrimaryEmailAddress}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">1543</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobDetails/startJobApp.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=07_PFTA_CP_Next1;PC=jobApp/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Employment Type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1585734930">Employment Type</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_ADDRESS2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_ADDRESS2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_COUNTRY</stringProp>
                    <stringProp name="Argument.value">222,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_CITY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_CITY</stringProp>
                    <stringProp name="Argument.value">${CCITY}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_EMAIL2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_EMAIL2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_ADDRESS1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_ADDRESS1</stringProp>
                    <stringProp name="Argument.value">${CADD}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MOBILEPHONE__COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MOBILEPHONE__COUNTRY</stringProp>
                    <stringProp name="Argument.value">1|USA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.SAVEPROFILE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.SAVEPROFILE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__COUNTRY</stringProp>
                    <stringProp name="Argument.value">1|USA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__PHONE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__PHONE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__ID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_HOMEPHONE__COUNTRY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_HOMEPHONE__COUNTRY</stringProp>
                    <stringProp name="Argument.value">1|USA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_STATEPROVINCE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_STATEPROVINCE</stringProp>
                    <stringProp name="Argument.value">,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_PREFERRED_NAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_PREFERRED_NAME</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MOBILEPHONE__PHONE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MOBILEPHONE__PHONE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_FIRSTNAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_FIRSTNAME</stringProp>
                    <stringProp name="Argument.value">${CFN}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_CONTACTMETHOD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_CONTACTMETHOD</stringProp>
                    <stringProp name="Argument.value">,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_HOMEPHONE__PHONE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_HOMEPHONE__PHONE</stringProp>
                    <stringProp name="Argument.value">(999) 999-9999</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORKPHONE__EXTENSION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORKPHONE__EXTENSION</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MOBILEPHONE__ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MOBILEPHONE__ID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_LASTNAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_LASTNAME</stringProp>
                    <stringProp name="Argument.value">${CLN}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_HOMEPHONE__ID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_HOMEPHONE__ID</stringProp>
                    <stringProp name="Argument.value">1530</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_MIDDLENAME" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_MIDDLENAME</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_EMAIL1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_EMAIL1</stringProp>
                    <stringProp name="Argument.value">RHF1554RHL@devnull.peoplefluent.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_POSTALCODE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_POSTALCODE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">11933</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=07a_PFTA_CP_Next1;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">15 to 30 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_08_Next2" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User enters required fields and clicks next - Employer Type</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/sublist?locale=nested&amp;fielddef=CP_SOURCE_REF_TYPE&amp;value=2&amp;index=&amp;_=1558452584087" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="index" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">index</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fielddef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fielddef</stringProp>
                    <stringProp name="Argument.value">CP_SOURCE_REF_TYPE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">nested</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="value" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">value</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/sublist</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=08_PFTA_CP_Next2;PC=sublist</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/sublist?locale=nested&amp;fielddef=CP_SOURCE_REF_VARIATION&amp;value=3&amp;index=&amp;_=1558452584088" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="index" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">index</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fielddef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">fielddef</stringProp>
                    <stringProp name="Argument.value">CP_SOURCE_REF_VARIATION</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="locale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">locale</stringProp>
                    <stringProp name="Argument.value">nested</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="value" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">value</stringProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/sublist</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=08a_PFTA_CP_Next2;PC=sublist</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_CUR_INCENTIVE_BONUS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_CUR_INCENTIVE_BONUS</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_REF_TYPE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_REF_TYPE</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_AVAILABLEON__DAY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_AVAILABLEON__DAY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_CURRENT_BASE_SALARY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_CURRENT_BASE_SALARY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_SHIFT_PREFERENCE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_SHIFT_PREFERENCE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_AVAILABLEON__YEAR" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_AVAILABLEON__YEAR</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_AVAILABLEON__MONTH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_AVAILABLEON__MONTH</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORK_ELIGIBILITY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORK_ELIGIBILITY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_REF_VARIATION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_REF_VARIATION</stringProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_AVE_CODE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_AVE_CODE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_AVE_VALUE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_AVE_VALUE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_SOURCINGOPTOUT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_SOURCINGOPTOUT</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_EMPLOYMENT_TYPE_DESIRED" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_EMPLOYMENT_TYPE_DESIRED</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_REF_CODE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_REF_CODE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">1194</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=08b_PFTA_CP_Next2;PC=jobApp/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Next 2 Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1054141615">cover letter</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Employee Type</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/site/constantProviders</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_REF_TYPE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_REF_TYPE</stringProp>
                    <stringProp name="Argument.value">2,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_CUR_INCENTIVE_BONUS" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_CUR_INCENTIVE_BONUS</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_AVAILABLEON__DAY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_AVAILABLEON__DAY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_CURRENT_BASE_SALARY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_CURRENT_BASE_SALARY</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_SHIFT_PREFERENCE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_SHIFT_PREFERENCE</stringProp>
                    <stringProp name="Argument.value">,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_AVAILABLEON__YEAR" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_AVAILABLEON__YEAR</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_AVAILABLEON__MONTH" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_AVAILABLEON__MONTH</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_WORK_ELIGIBILITY" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_WORK_ELIGIBILITY</stringProp>
                    <stringProp name="Argument.value">,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_REF_VARIATION" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_REF_VARIATION</stringProp>
                    <stringProp name="Argument.value">3,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_AVE_CODE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_AVE_CODE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_AVE_VALUE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_AVE_VALUE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_SOURCINGOPTOUT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_SOURCINGOPTOUT</stringProp>
                    <stringProp name="Argument.value">,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CP_SOURCE_REF_CODE" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CP_SOURCE_REF_CODE</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.FLD_CAND_EMPLOYMENT_TYPE_DESIRED" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.FLD_CAND_EMPLOYMENT_TYPE_DESIRED</stringProp>
                    <stringProp name="Argument.value">,</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3328</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=08c_PFTA_CP_Next2;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">15 to 30 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_09_Upload" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User Uploads Resume</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Before Sub - https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/documents/navigate.html" enabled="false">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\JMeter_5.0\CP\Documents\ProdDoc25.docx" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\JMeter_5.0\CP\Documents\ProdDoc25.docx</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="File.paramname">resumeFile</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                  </elementProp>
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                  </elementProp>
                  <elementProp name="dropboxCLFilePath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dropboxCLFilePath</stringProp>
                  </elementProp>
                  <elementProp name="gdriveCLFileId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">gdriveCLFileId</stringProp>
                  </elementProp>
                  <elementProp name="coverLetterMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">paste</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">coverLetterMethod</stringProp>
                  </elementProp>
                  <elementProp name="coverLetterContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">coverLetterContent</stringProp>
                  </elementProp>
                  <elementProp name="resumeMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">upload</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">resumeMethod</stringProp>
                  </elementProp>
                  <elementProp name="dropboxResumeFilePath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dropboxResumeFilePath</stringProp>
                  </elementProp>
                  <elementProp name="gdriveResumeFileId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">gdriveResumeFileId</stringProp>
                  </elementProp>
                  <elementProp name="resumeContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">resumeContent</stringProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/careerscp/client_pfresponsivehybrid/external/documents/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Request from YQ - Working BEFORE Substitution of Doc Types </stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Upload Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="448081779">Submit Supporting Documents</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">51160</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarykbjZ9qwwRDpNYJkB</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=09_PFTA_CP_Next2;PC=en_documents/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/documents/navigate.html" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\JMeter_5.0\CP\Documents\\${DocResume}.${Type}" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\JMeter_5.0\CP\Documents\\${DocResume}.${Type}</stringProp>
                    <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.wordprocessingml.document</stringProp>
                    <stringProp name="File.paramname">resumeFile</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                  </elementProp>
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                  </elementProp>
                  <elementProp name="dropboxCLFilePath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dropboxCLFilePath</stringProp>
                  </elementProp>
                  <elementProp name="gdriveCLFileId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">gdriveCLFileId</stringProp>
                  </elementProp>
                  <elementProp name="coverLetterMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">paste</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">coverLetterMethod</stringProp>
                  </elementProp>
                  <elementProp name="coverLetterContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">coverLetterContent</stringProp>
                  </elementProp>
                  <elementProp name="resumeMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">upload</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">resumeMethod</stringProp>
                  </elementProp>
                  <elementProp name="dropboxResumeFilePath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dropboxResumeFilePath</stringProp>
                  </elementProp>
                  <elementProp name="gdriveResumeFileId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">gdriveResumeFileId</stringProp>
                  </elementProp>
                  <elementProp name="resumeContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">resumeContent</stringProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/careerscp/client_pfresponsivehybrid/external/documents/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Request from YQ - Working BEFORE Substitution of Doc Types </stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Upload Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="448081779">Submit Supporting Documents</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">51160</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarykbjZ9qwwRDpNYJkB</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=09_PFTA_CP_Next2;PC=en_documents/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
              <stringProp name="FileSaver.filename">C:\JMeter_5.0\CP\DEBUG\7_24_Response</stringProp>
              <boolProp name="FileSaver.errorsonly">true</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.addTimstamp">true</boolProp>
              <stringProp name="FileSaver.variablename">C:\JMeter_5.0\CP\DEBUG</stringProp>
            </ResultSaver>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/documents/navigate.html" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;jobApplicationId&quot;&#xd;
&#xd;
0&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;documentCreatorId&quot;&#xd;
&#xd;
0&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;miscDocumentsId&quot;&#xd;
&#xd;
0&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;informationRequestBeanId&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;direction&quot;&#xd;
&#xd;
next&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;exitStatus&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;preview&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;coverLetterFile&quot;; filename=&quot;&quot;&#xd;
Content-Type: application/octet-stream&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;dropboxCLFilePath&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;gdriveCLFileId&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;coverLetterMethod&quot;&#xd;
&#xd;
paste&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;coverLetterContent&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;resumeMethod&quot;&#xd;
&#xd;
upload&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;resumeFile&quot;; filename=&quot;C:\\CPResumes\\Documents\\ProdDoc25.docx&quot;&#xd;
Content-Type: application/octet-stream&#xd;
&#xd;
ï¿½ï¿½&#x11;&#x871;&#x1a;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&gt;&#x0;&#x3;&#x0;ï¿½ï¿½	&#x0;&#x6;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;[&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;]&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;Z&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;Yï¿½	&#x4;&#x0;&#x0;ï¿½&#x12;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;&#xe;&#x0;bjbj[ï¿½[ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;	&#x4;&#x16;&#x0;4:&#x0;&#x0;9ï¿½&#xd;
\9ï¿½&#xd;
\d&#x15;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;M&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#xf;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#xf;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#xf;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x14;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;8&#x0;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;L&#x0;&#x0;&#x0;&#x8;&#x19;&#x0;&#x0;,&#x0;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;4&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;4&#x19;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ZB&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;\B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;\B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;\B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;\B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;\B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;\B&#x0;&#x0;$&#x0;&#x0;&#x0;ï¿½D&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;sG&#x0;&#x0;@&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x15;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;^&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ZB&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ZB&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;n&#x1;&#x0;&#x0;:&gt;&#x0;&#x0;&#x8;&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;VA&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x19;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½kt.ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;F&#x0;&#x0;&#x0;B?&#x0;&#x0; &#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;FB&#x0;&#x0;&#x14;&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;0&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;b?&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;ï¿½G&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;ï¿½G&#x0;&#x0;@&#x0;&#x0;&#x0;VA&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;VA&#x0;&#x0;0&#x0;&#x0;&#x0;ï¿½G&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;p&#x18;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½A&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½G&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;%&#x1a;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;&gt;&#xc;&#x0;&#x0;6&#x17;&#x0;&#x0;:&#x1;&#x0;&#x0;&#x5;&#x0;&#x12;&#x1;&#x0;&#x0;	&#x4;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;Mary Love&#xd;Centennial, CO,&#xd;MLove76584@gmail.com,&#xd;303.669.8067&#xd;&#x1;&#xd;QI/UM/Case Management&#xd;Extensive managed healthcare experience with an objective is to find a challenging and progressive organization that I can make a contribution while growing my skills and expertise with a focused on medical management of all areas of care with a goal to delight all customers&#xd;Specialties&#xd;Medical Audits, Case Management, Utilization Management, Documentation Improvement, Discharge Planning, Quality Improvement, Occupational Health, FMLA and STD administration&#xd;&#x1;&#xd;CMS &#xd;Region A:-Performant Recovery (a contractor) San Angelo, TX	2012 to present&#xd;RN RAC auditor&#xd;Worked remotely and audited provider claims for the Medicare program&#xd;Identify and reduce Medicare improper payments through the efficient detection and collection of overpayments, &#xd;Recovery Audit program to recoup overpayments associated with services for which payment is madeï¿½&#xd;Application of criterion to determine appropriate level of care for severity of illness and intensity of service &#xd;&#xd;Kaiser Permanente, Denver, CO						2011 to Feb 2012&#xd;Quality Resource Coordinator Temporary position&#xd;Provides assessment &amp; monitoring of resource utilization, &#xd;Coordinates outside referrals, provider practice patterns, &#xd;Quality of care, &amp; coordination of our members continuing care needs.&#xd;Maintains knowledge of policies &amp; procedures &amp; performs in accordance w/ applicable regulatory requirements.&#xd;Lutheran Exempla, Denver CO						2011-July 2011&#xd;Lead Clinical Documentation Specialist&#xd;Responsible for 3.8 FTEï¿½s for day to day management of work assignment, reporting and tracking and trending analysis&#xd;Reviewing medical records to facilitate the accurate representation of the severity of illness&#xd;Improving the quality of the physiciansï¿½ clinical documentation. &#xd;Extensive record review,&#xd;Interaction with physicians, HIM professionals, and nursing staff for appropriate case management of patient population.&#xd;Active participation in team meetings, case management  and education of staff with daily huddle meetings&#xd;&#xd;PHP, Denver, CO									2010-2011&#xd;Care Manager, Pre authorization Department&#xd;Utilized clinical judgment to evaluate medical treatment requests according to pre approved guidelines and interpretation of several different and distinct medical management plans.&#xd;Understanding individual plan benefits for member&apos;s plan benefits with appropriate case management of population.  &#xd;Case Manage with clinical condition i.e. age, co-morbidities, complications, progress of treatment, psychosocial situation, and home environment&#xd;Identifies potential case management issues with accurate a quick referral management&#xd;Accurate tracking and trending of client base and physician management&#xd;&#xd;Rose Medical Center, Denver, CO						2009-2010&#xd;High Risk Case Manager.&#xd;Ongoing support with clinical expertise through comprehensive assessment, planning, implementation and evaluation of patient needs. &#xd;Having a focused goal to enhance the quality of patient management and satisfaction,&#xd;To promote continuity of care and cost effectiveness&#xd;Integrating and functions of case management, utilization review ,and discharge planning&#xd;Being accountable for the care, coordination and discharge planning of high risk, high dollar, under insured patients. &#xd;&#xd;University Hospital, Denver CO						2006 to 2009&#xd;Case/Utilization Manager&#xd;Worker Comp Case Manager&#xd;Ensuring the collaborative process that assesses, plans, implements, coordinates, monitors, and evaluates the options and services required to meet the client&apos;s health and human service needs. &#xd;This involved advocacy, communication, and resource management and promotes quality and cost-effective interventions and outcomes&#xd;Securing information from health care providers and in some instances the patient and/or family in order to determine whether medical indicators satisfy criteria for planned procedure, admission, continued stay or discharge plan.  &#xd;Interpretation of InterQual and Milliman criteria to support recommendations for inpatient and outpatient services.  &#xd;Referral to departments such as patient financial services, social services, and ambulatory care settings/clinics. &#xd;Determination of appropriateness of admission and level of care such as inpatient, observation&#xd;Managed Workmen Comp claims&#xd;Managed FMLA and STD/LTD cases&#xd;&#xd;Federal Occupational Health,&#xd;(Through contracting agency) Denver CO					2005: to 2006&#xd;Public Health RN Account Manager&#xd;Involvement with the government and military agencies, with clear focus on medical surveillance in the work environment&#xd;Intensive work with employers and communities to help plan and implement health surveillance programs.&#xd;Instruction to individuals, employers, clinics and community groups regarding health issues such as preventive care, health surveillance and wellness promotion.&#xd;Arranged group health screening for immunizations, blood pressure monitoring, and preventive care&#xd;&#xd;&#xd;&#xd;Additional Relevant Experience&#xd;Worked as a CNA and LPN in the Medical Surgical Nursing&#xd;Worked as a RN in Home Care, Director of Home Health,&#xd;Quality Management Specialist, Manager of Utilization &#xd;Case Manager in the area of Workers Compensation&#xd;&#xd;Education&#xd;BSN University of Colorado Health Science Center, Denver, CO&#xd;&#xd;Personal Development&#xd;3M training for Clinical Documentation Specialist&#xd;&#xd;Technical Skills&#xd;Proficient in Word, Excel, PowerPoint, Outlook, PeopleSoft and Kronos&#xd;&#xd;Affiliations&#xd;Case Management Society of America&#xd;RN Case Managers&#xd;&#x3;&#xd;&#xd;&#x4;&#xd;&#xd;&#x3;&#xd;&#xd;&#x4;&#xd;&#xd;Mary Love, RN BSN&#xd;(303.669.8067)&#xd;&#xd;&#x13; PAGE   \* MERGEFORMAT &#x14;1&#x15;&#xd;&#xd;&#xd;&#xd;&#xd;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;	&#x8;&#x0;&#x0;&#xd;
&#x8;&#x0;&#x0;&#x14;&#x8;&#x0;&#x0;&#x18;&#x8;&#x0;&#x0;&lt;&#x8;&#x0;&#x0;=&#x8;&#x0;&#x0;&gt;&#x8;&#x0;&#x0;?&#x8;&#x0;&#x0;B&#x8;&#x0;&#x0;U&#x8;&#x0;&#x0;a&#x8;&#x0;&#x0;ï¿½&#x8;&#x0;&#x0;ï¿½&#x8;&#x0;&#x0;&#x12;	&#x0;&#x0;&#x19;	&#x0;&#x0;&#x1c;	&#x0;&#x0;D	&#x0;&#x0;S	&#x0;&#x0;h	&#x0;&#x0;i	&#x0;&#x0;ï¿½ï¿½ï¿½Ì¿Ì®Ìï¿½zgzTgTgAgz&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;$&#x15;h}ky&#x0;&#x16;hF[ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;$&#x15;h}ky&#x0;&#x16;hï¿½]&#x1e;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;$&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;$&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x1d;&#x16;hï¿½3ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;!&#x3;j&#x0;&#x0;&#x0;&#x0;&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;U&#x8;&#x1;^J&#x3;&#x0;&#x18;&#x15;h}ky&#x0;&#x16;hï¿½]&#x1e;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;&#x0;&#x18;&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;&#x0;&#x12;&#x16;h&#x7;=ï¿½&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;&#x0;&#x1b;&#x15;h}ky&#x0;&#x16;hï¿½_ï¿½&#x0;5&#x8;ï¿½OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;&#x1b;&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;5&#x8;ï¿½OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;&#x0;&#x14;&#x0;&#x8;&#x0;&#x0;&#xd;
&#x8;&#x0;&#x0;&#x1a;&#x8;&#x0;&#x0;0&#x8;&#x0;&#x0;=&#x8;&#x0;&#x0;?&#x8;&#x0;&#x0;U&#x8;&#x0;&#x0;i	&#x0;&#x0;u	&#x0;&#x0;#&#xd;
&#x0;&#x0;%&#xd;
&#x0;&#x0;*&#xd;
&#x0;&#x0;v&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;:&#xb;&#x0;&#x0;ï¿½&#xb;&#x0;&#x0;&#xe;&#xc;&#x0;&#x0;&#xf;&#xc;&#x0;&#x0;C&#xc;&#x0;&#x0;s&#xc;&#x0;&#x0;ï¿½&#xc;&#x0;&#x0;ï¿½&#xc;&#x0;&#x0;0&#xd;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xd;&#x0;&#x14;ï¿½&#x0;&#x0;gd&#xd;
&#x0;ï¿½&#x0;&#xd;
&#x0;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xd;&#x0;&#x14;ï¿½&#x0;&#x0;gd&#x13;2R&#x0;&#xd;
&#x0;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xd;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½3ï¿½&#x0;&#x0;&#x6;&#x0;&#x0;&#x14;ï¿½&#x0;&#x0;gd&#x13;2R&#x0;&#x0;&#x6;&#x0;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½4ï¿½&#x0;&#x0;	&#x0;&#x0;&#x3;$&#x1;&#x14;ï¿½&#x0;&#x0;a$&#x1;gdï¿½4ï¿½&#x0;&#x0;&#x17;i	&#x0;&#x0;u	&#x0;&#x0;ï¿½	&#x0;&#x0;ï¿½	&#x0;&#x0;&quot;&#xd;
&#x0;&#x0;#&#xd;
&#x0;&#x0;$&#xd;
&#x0;&#x0;%&#xd;
&#x0;&#x0;*&#xd;
&#x0;&#x0;G&#xd;
&#x0;&#x0;H&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½ï¿½Ç´Çï¿½|[|J,&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;:&#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&quot;&quot;&quot;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0; &#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;@&#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;5&#x8;ï¿½B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;\&#x8;ï¿½^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&#x0;&#x0;&#x0;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;#&#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;)&#x3;jï¿½&#x0;&#x0;&#x0;&#x15;h}ky&#x0;&#x16;hï¿½]&#x1e;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;U&#x8;&#x1;^J&#x3;&#x0;aJ&#x14;&#x0;$&#x15;h}ky&#x0;&#x16;hï¿½p&lt;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;$&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;&#x1e;&#x16;hï¿½3ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;*&#x15;h}ky&#x0;&#x16;hï¿½4ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;PJ&#x0;&#x0;QJ&#x3;&#x0;\&#x8;ï¿½^J&#x3;&#x0;aJ&#x14;&#x0;&#xc;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;7&#xb;&#x0;&#x0;:&#xb;&#x0;&#x0;ï¿½&#xb;&#x0;&#x0;ï¿½&#xb;&#x0;&#x0;ï¿½&#xb;&#x0;&#x0;&#xd;&#xc;&#x0;&#x0;&#xe;&#xc;&#x0;&#x0;ï¿½Ä¦ï¿½jJ7ï¿½&amp;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0; &#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;$&#x15;hï¿½3ï¿½&#x0;&#x16;hï¿½3ï¿½&#x0;0J&#x1b;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;&gt;&#x15;hï¿½3ï¿½&#x0;&#x16;hï¿½3ï¿½&#x0;0J&#x1b;&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&#x0;&#x0;&#x0;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;:&#x15;hï¿½3ï¿½&#x0;&#x16;hï¿½3ï¿½&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&#x0;&#x0;&#x0;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;:&#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&quot;&quot;&quot;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;:&#x15;hï¿½3ï¿½&#x0;&#x16;h&#x13;2R&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&#x0;&#x0;&#x0;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;:&#x15;hï¿½3ï¿½&#x0;&#x16;hï¿½3ï¿½&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&quot;&quot;&quot;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;:&#x15;hï¿½3ï¿½&#x0;&#x16;hï¿½3ï¿½&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x2;&#x0;QJ&#x2;&#x0;^J&#x2;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&#x0;&#x0;&#x0;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;	&#xe;&#xc;&#x0;&#x0;&#xf;&#xc;&#x0;&#x0;!&#xc;&#x0;&#x0;_&#xc;&#x0;&#x0;r&#xc;&#x0;&#x0;s&#xc;&#x0;&#x0;ï¿½&#xc;&#x0;&#x0;ï¿½&#xc;&#x0;&#x0;ï¿½&#xc;&#x0;&#x0;ï¿½&#xc;&#x0;&#x0;/&#xd;&#x0;&#x0;0&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;@&#xf;&#x0;&#x0;ï¿½ï¿½Ì¾Ì ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½p_N9&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;(&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½p&lt;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;:&#x15;h}ky&#x0;&#x16;h&#xd;
&#x0;ï¿½&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&quot;&quot;&quot;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;:&#x15;h}ky&#x0;&#x16;hï¿½!f&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;fH&#x0;&#x1;ph&quot;&quot;&quot;&#x0;qï¿½&#xd;
&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x1a;&#x16;h&#x13;2R&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½!f&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hï¿½!f&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h&#x13;2R&#x0;&#x16;h&#x13;2R&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x12;0&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;ï¿½&#xd;&#x0;&#x0;i&#xe;&#x0;&#x0;ï¿½&#xe;&#x0;&#x0;&#xd;
&#xf;&#x0;&#x0;#&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;&#x6;&#x10;&#x0;&#x0;&#x7;&#x10;&#x0;&#x0;)&#x10;&#x0;&#x0;T&#x10;&#x0;&#x0;&#xd;
&#x11;&#x0;&#x0;~&#x11;&#x0;&#x0;&#xf;&#x12;&#x0;&#x0;e&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x4;&#x1a;&#x0;gdï¿½Z&#x18;&#x0;&#x0;&#x6;&#x0;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½Z&#x18;&#x0;&#xd;
&#x19;&#x0;&#xd;
&amp;&#x0;&#xb;F&#x8;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½&#x1;&#x1f;&#x0;&#xd;
&#x19;&#x0;&#xd;
&amp;&#x0;&#xb;F&#x8;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½-d&#x0;&#xd;
&#x19;&#x0;&#xd;
&amp;&#x0;&#xb;F&#x7;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½&#x1;&#x1f;&#x0;&#xd;
&#x19;&#x0;&#xd;
&amp;&#x0;&#xb;F&#x7;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½-d&#x0;&#x0;&#x6;&#x0;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½&#x15;ï¿½&#x0;&#x0;&#x6;&#x0;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½4ï¿½&#x0;&#xd;
&#x0;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xd;&#x0;&#x14;ï¿½&#x0;&#x0;gd&#xd;
&#x0;ï¿½&#x0;&#x0;&#x14;@&#xf;&#x0;&#x0;C&#xf;&#x0;&#x0;d&#xf;&#x0;&#x0;e&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;&#x5;&#x10;&#x0;&#x0;&#x7;&#x10;&#x0;&#x0;&#xc;&#x10;&#x0;&#x0;&#x16;&#x10;&#x0;&#x0;$&#x10;&#x0;&#x0;&apos;&#x10;&#x0;&#x0;(&#x10;&#x0;&#x0;)&#x10;&#x0;&#x0;T&#x10;&#x0;&#x0;{&#x10;&#x0;&#x0;ï¿½&#x10;&#x0;&#x0;ï¿½&#x10;&#x0;&#x0;ï¿½&#x10;&#x0;&#x0;ï¿½&#x10;&#x0;&#x0;L&#x11;&#x0;&#x0;}&#x11;&#x0;&#x0;ï¿½Ô¿ï¿½&#x52d;&#x52d;ï¿½ï¿½ï¿½yï¿½yï¿½ï¿½dOdOdO=&#x0;&#x0;&#x0;#&#x16;hï¿½&#x1;&#x1f;&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;ph&#x0;&#x0;&#x0;&#x0;)&#x15;h}ky&#x0;&#x16;hï¿½Z&#x18;&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;ph&#x0;&#x0;&#x0;&#x0;)&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;ph&#x0;&#x0;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hA]C&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;&quot;&#x16;hï¿½&#x1;&#x1f;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x0;(&#x15;hï¿½&#x1;&#x1f;&#x0;&#x16;hï¿½&#x1;&#x1f;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x0;(&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x0;,&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;0J&#x18;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x17;}&#x11;&#x0;&#x0;~&#x11;&#x0;&#x0;ï¿½&#x11;&#x0;&#x0;ï¿½&#x11;&#x0;&#x0;ï¿½&#x11;&#x0;&#x0;&#xe;&#x12;&#x0;&#x0;&#xf;&#x12;&#x0;&#x0;;&#x12;&#x0;&#x0;d&#x12;&#x0;&#x0;e&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;&#x4;&#x13;&#x0;&#x0;&#x12;&#x13;&#x0;&#x0;C&#x13;&#x0;&#x0;[&#x13;&#x0;&#x0;ï¿½&#x14;&#x0;&#x0;ï¿½&#x14;&#x0;&#x0;ï¿½&#x14;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ê² ï¿½ï¿½~ï¿½~ï¿½lZ~E&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;(&#x15;h}ky&#x0;&#x16;hï¿½&lt;&#x13;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hv%x&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;#&#x15;h}ky&#x0;&#x16;h;3ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h}ky&#x0;&#x16;hv%x&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½p&lt;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hï¿½Z&#x18;&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½Z&#x18;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;)&#x15;h}ky&#x0;&#x16;hï¿½&#x15;ï¿½&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;ph&#x0;&#x0;&#x0;&#x0;#&#x16;hï¿½&#x1;&#x1f;&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;ph&#x0;&#x0;&#x0;&#x0;)&#x15;h}ky&#x0;&#x16;hï¿½Z&#x18;&#x0;B*&#x1;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;ph&#x0;&#x0;&#x0;&#x0;&#x0;&#x16;ï¿½&#x12;&#x0;&#x0;y&#x13;&#x0;&#x0;ï¿½&#x13;&#x0;&#x0;&#x3;&#x14;&#x0;&#x0;\&#x14;&#x0;&#x0;ï¿½&#x14;&#x0;&#x0;ï¿½&#x14;&#x0;&#x0;&#x6;&#x15;&#x0;&#x0;&#x1f;&#x15;&#x0;&#x0;8&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;|&#x16;&#x0;&#x0;d&#x17;&#x0;&#x0;ï¿½&#x17;&#x0;&#x0;N&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;&#x6;&#x19;&#x0;&#x0;?&#x19;&#x0;&#x0;`&#x19;&#x0;&#x0;ï¿½&#x19;&#x0;&#x0;?&#x1a;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x8;&#x1a;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xb;&#x0;gdï¿½-d&#x0;&#xd;
&#x19;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xd;
&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½&lt;&#x13;&#x0;&#x8;&#x1a;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xd;
&#x0;gdï¿½-d&#x0;&#x0;&#x4;&#x1a;&#x0;gdv%x&#x0;&#x8;&#x1a;&#x0;&#xd;
&amp;&#x0;&#xb;F	&#x0;gdï¿½-d&#x0;&#x0;&#x4;&#x1a;&#x0;gdF[ï¿½&#x0;&#x0;&#x18;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;&#x4;&#x19;&#x0;&#x0;&#x5;&#x19;&#x0;&#x0;&#x6;&#x19;&#x0;&#x0;&#x7;&#x19;&#x0;&#x0;&#xe;&#x19;&#x0;&#x0;&quot;&#x19;&#x0;&#x0;#&#x19;&#x0;&#x0;.&#x19;&#x0;&#x0;1&#x19;&#x0;&#x0;`&#x19;&#x0;&#x0;ï¿½&#x19;&#x0;&#x0;ï¿½&#x19;&#x0;&#x0;ï¿½&#x19;&#x0;&#x0;&gt;&#x1a;&#x0;&#x0;M&#x1a;&#x0;&#x0;W&#x1a;&#x0;&#x0;{&#x1a;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;&#x4;&#x1b;&#x0;&#x0;	&#x1b;&#x0;&#x0;,&#x1b;&#x0;&#x0;.&#x1b;&#x0;&#x0;B&#x1b;&#x0;&#x0;C&#x1b;&#x0;&#x0;D&#x1b;&#x0;&#x0;E&#x1b;&#x0;&#x0;ï¿½ï¿½ï¿½É·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½sï¿½sï¿½sï¿½sï¿½sï¿½sï¿½sï¿½sï¿½eT&#x0;&#x0;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;h}ky&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;&#x1a;&#x16;hï¿½_ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½_ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½jï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½p&lt;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hv%x&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hv%x&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h}ky&#x0;&#x16;h;3ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;(&#x15;h}ky&#x0;&#x16;hï¿½&lt;&#x13;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;mH	&#x0;sH	&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½&lt;&#x13;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; ï¿½&#x1a;&#x0;&#x0;B&#x1b;&#x0;&#x0;C&#x1b;&#x0;&#x0;D&#x1b;&#x0;&#x0;E&#x1b;&#x0;&#x0;d&#x1b;&#x0;&#x0;ï¿½&#x1b;&#x0;&#x0;ï¿½&#x1b;&#x0;&#x0;	&#x1c;&#x0;&#x0;:&#x1c;&#x0;&#x0;;&#x1c;&#x0;&#x0;E&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;&quot;&#x1d;&#x0;&#x0;#&#x1d;&#x0;&#x0;0&#x1d;&#x0;&#x0;S&#x1d;&#x0;&#x0;d&#x1d;&#x0;&#x0;f&#x1d;&#x0;&#x0;g&#x1d;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;	&#x0;&#x0;&#x12;dï¿½&#x0;&#x1;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½4ï¿½&#x0;&#x0;&#x7;&#x1a;&#x0;&#x3;$&#x1;a$&#x1;gd;3ï¿½&#x0;&#x0;&#x7;&#x1a;&#x0;&#x3;$&#x1;a$&#x1;gdï¿½_ï¿½&#x0;&#x0;&#x4;&#x1a;&#x0;gdï¿½_ï¿½&#x0;&#x8;&#x1a;&#x0;&#xd;
&amp;&#x0;&#xb;F&#xb;&#x0;gdï¿½-d&#x0;&#x0;&#x18;E&#x1b;&#x0;&#x0;d&#x1b;&#x0;&#x0;ï¿½&#x1b;&#x0;&#x0;ï¿½&#x1b;&#x0;&#x0;ï¿½&#x1b;&#x0;&#x0;ï¿½&#x1b;&#x0;&#x0;	&#x1c;&#x0;&#x0;:&#x1c;&#x0;&#x0;;&#x1c;&#x0;&#x0;E&#x1c;&#x0;&#x0;H&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;ï¿½&#x1c;&#x0;&#x0;#&#x1d;&#x0;&#x0;0&#x1d;&#x0;&#x0;d&#x1d;&#x0;&#x0;e&#x1d;&#x0;&#x0;g&#x1d;&#x0;&#x0;h&#x1d;&#x0;&#x0;j&#x1d;&#x0;&#x0;k&#x1d;&#x0;&#x0;m&#x1d;&#x0;&#x0;n&#x1d;&#x0;&#x0;p&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½ï¿½ï¿½ÜºÜ©ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Üï¿½ÜÜï¿½~z~z~z~zvrjfj&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x6;&#x16;hï¿½_ï¿½&#x0;&#x0;&#xf;&#x3;j&#x0;&#x0;&#x0;&#x0;&#x16;hï¿½_ï¿½&#x0;U&#x8;&#x1;&#x6;&#x16;hi5Z&#x0;&#x0;&#x6;&#x16;h;3ï¿½&#x0;&#x0;&#x6;&#x16;hï¿½;ï¿½&#x0;&#x0;&#xf;&#x3;j&#x0;&#x0;&#x0;&#x0;&#x16;hï¿½;ï¿½&#x0;U&#x8;&#x1; &#x15;h}ky&#x0;&#x16;hï¿½&#x6;l&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;h;3ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0; &#x15;h}ky&#x0;&#x16;h&#xd;
&#x0;ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½p&lt;&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;hï¿½_ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;h;3ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;#&#x15;h}ky&#x0;&#x16;hï¿½_ï¿½&#x0;5&#x8;ï¿½CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;%g&#x1d;&#x0;&#x0;i&#x1d;&#x0;&#x0;j&#x1d;&#x0;&#x0;l&#x1d;&#x0;&#x0;m&#x1d;&#x0;&#x0;o&#x1d;&#x0;&#x0;p&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x7;&#x1a;&#x0;&#x3;$&#x1;a$&#x1;gdï¿½_ï¿½&#x0;&#x0;&#x1;&#x12;&#x0;&#x0;&#x4;&#x12;&#x0;&#x3;$&#x2;a$&#x2;&#x0;&#x4;&#x10;&#x0;gd;3ï¿½&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;	&#x0;&#x0;&#x12;dï¿½&#x0;&#x1;&#x0;&#x14;ï¿½&#x0;&#x0;gdï¿½4ï¿½&#x0;&#x0;&#xe;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0; &#x15;h}ky&#x0;&#x16;h;3ï¿½&#x0;CJ&#x14;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x14;&#x0;&#x0;&#x6;&#x16;hï¿½;ï¿½&#x0;&#x0;&#x6;&#x16;hï¿½_ï¿½&#x0;&#x0;&#xf;&#x3;j&#x0;&#x0;&#x0;&#x0;&#x16;hï¿½_ï¿½&#x0;U&#x8;&#x1;&#x11;&#x16;hï¿½jï¿½&#x0;mH&#x0;&#x4;nH&#x0;&#x4;u&#x8;&#x1;&#x0;&#x5;2&#x0;1ï¿½h&#x1;:pï¿½1ï¿½&#x0;&#x1f;ï¿½ï¿½/ ï¿½ï¿½=!ï¿½ï¿½&#x5;&quot;ï¿½ï¿½&#x5;#ï¿½ï¿½&#x5;$ï¿½ï¿½&#x5;%ï¿½&#x0;&#x0;&#x17;ï¿½ï¿½&#x2;&#x18;ï¿½ï¿½&#x2;&#xc;ï¿½ï¿½&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;D&#x0;d&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xe;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x3;ï¿½&#x1;ï¿½$&lt;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xf;&#x0;&#x4;ï¿½P&#x0;&#x0;&#x0;&#x12;&#x0;&#xd;
ï¿½&#x8;&#x0;&#x0;&#x0;&#x1;&#x4;&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;3&#x0;&#xb;ï¿½&#x12;&#x0;&#x0;&#x0;ï¿½&#x1;ï¿½ï¿½ï¿½&#x0;ï¿½&#x1;&#x10;&#x0;&#x10;&#x0;ï¿½&#x1;&#x0;&#x0;&#x8;&#x0;3&#x0;&quot;ï¿½&#x12;&#x0;&#x0;&#x0;ï¿½&#x3;&#x1;&#x0;&#x0;&#x0;ï¿½&#x3;&#x1e;&#x0;&#x0;&#x0;ï¿½&#x3;&#x0;(&#x0;(&#x0;&#x0;&#x10;ï¿½&#x4;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#x0;&#x0;&#x0;D&#x0;d&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xe;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x3;ï¿½&#x1;ï¿½$&lt;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xf;&#x0;&#x4;ï¿½P&#x0;&#x0;&#x0;&#x12;&#x0;&#xd;
ï¿½&#x8;&#x0;&#x0;&#x0;&#x2;&#x4;&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;3&#x0;&#xb;ï¿½&#x12;&#x0;&#x0;&#x0;ï¿½&#x1;ï¿½ï¿½ï¿½&#x0;ï¿½&#x1;&#x10;&#x0;&#x10;&#x0;ï¿½&#x1;&#x0;&#x0;&#x8;&#x0;3&#x0;&quot;ï¿½&#x12;&#x0;&#x0;&#x0;ï¿½&#x3;&#x1;&#x0;&#x0;&#x0;ï¿½&#x3;&#x1e;&#x0;&#x0;&#x0;ï¿½&#x3;&#x0;(&#x0;(&#x0;&#x0;&#x10;ï¿½&#x4;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xd;
&#x6;&#x1c;&#x0;&#x12;&#x0;&#x1;&#x0;s&#x1;&#xf;&#x0;&#x7;&#x0;&#x4;&#x0;&#x4;&#x0;&#x4;&#x0;&#x0;&#x0;&#x4;&#x0;&#x8;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;v&#x2;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;&gt;&#x2;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;h&#x1;&#x0;&#x0;H&#x1;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;6&#x6;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;6&#x6;&#x0;&#x0;2&#x6;&#x0;&#x0;&#x18;&#x0;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0;2&#x6;&#x0;&#x0;(&#x2;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;ï¿½&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x10;&#x4;&#x0;&#x0; &#x4;&#x0;&#x0;0&#x4;&#x0;&#x0;@&#x4;&#x0;&#x0;P&#x4;&#x0;&#x0;`&#x4;&#x0;&#x0;p&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;8&#x1;&#x0;&#x0;X&#x1;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x8;&#x2;&#x0;&#x0;&#x18;&#x2;&#x0;&#x0;V&#x2;&#x0;&#x0;~&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x10;&#x3;&#x0;&#x0; &#x3;&#x0;&#x0;0&#x3;&#x0;&#x0;@&#x3;&#x0;&#x0; &#x0;&#x0;&#x0;OJ&#x4;&#x0;PJ&#x4;&#x0;QJ&#x4;&#x0;_H&#x1;&#x4;mH	&#x4;nH	&#x4;sH	&#x4;tH	&#x4;&#x0;&#x0;&#x0;&#x0;J&#x0;&#x0;`ï¿½ï¿½&#x2;&#x0;J&#x0;&#xc;&#x10;&#x0;&#x0;ï¿½1ï¿½&#x0;&#x0;&#x0;&#x6;&#x0;N&#x0;o&#x0;r&#x0;m&#x0;a&#x0;l&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;&#x12;d&#x14;&#x1;&#x1;&#x0;&#x14;ï¿½ï¿½&#x0;&#x18;&#x0;CJ&#x16;&#x0;_H&#x1;&#x4;aJ&#x16;&#x0;mH	&#x4;sH	&#x4;tH	&#x4;&#x0;&#x0;&#x0;&#x0;d&#x0;&#x3;&#x0;&#x1;&#x0;2&#x0;d&#x0;&#xc;&#x10;&#x16;&#x0;ï¿½4ï¿½&#x0;ï¿½&#x0;	&#x0;H&#x0;e&#x0;a&#x0;d&#x0;i&#x0;n&#x0;g&#x0; &#x0;3&#x0;&#x0;&#x0;&#x19;&#x0;&#x3;&#x0;&#x12;dï¿½&#x0;&#x1;&#x0;&#x13;ï¿½d&#x0;&#x14;ï¿½d&#x0;@&amp;&#x2;[$&#x1;\$&#x1;&#x0;&#x1e;&#x0;5&#x8;ï¿½CJ&#x1b;&#x0;OJ&#x0;&#x0;PJ&#x0;&#x0;QJ&#x0;&#x0;\&#x8;ï¿½^J&#x0;&#x0;aJ&#x1b;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;D&#x0;A`ï¿½ï¿½ï¿½&#x0;D&#x0;&#xc;&#xd;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x16;&#x0;D&#x0;e&#x0;f&#x0;a&#x0;u&#x0;l&#x0;t&#x0; &#x0;P&#x0;a&#x0;r&#x0;a&#x0;g&#x0;r&#x0;a&#x0;p&#x0;h&#x0; &#x0;F&#x0;o&#x0;n&#x0;t&#x0;&#x0;&#x0;&#x0;&#x0;R&#x0;i&#x0;ï¿½ï¿½ï¿½&#x0;R&#x0;&#xc;&#x1d;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;0&#x6;&#xc;&#x0;T&#x0;a&#x0;b&#x0;l&#x0;e&#x0; &#x0;N&#x0;o&#x0;r&#x0;m&#x0;a&#x0;l&#x0;&#x0;&#x0;&#x1c;&#x0;&#x17;ï¿½&#x3;&#x0;&#x0;4ï¿½&#x6;&#x0;&#x1;&#xd;
&#x3;l&#x0;4ï¿½&#x6;&#x0;&#x1;&#x5;&#x3;&#x0;&#x0;aï¿½&#x3;&#x0;&#x0;&#x2;&#x0;&#xb;&#x0;&#x0;&#x0;(&#x0;k ï¿½ï¿½ï¿½&#x0;(&#x0;&#x0;&#xd;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;0&#x6;&#x7;&#x0;N&#x0;o&#x0; &#x0;L&#x0;i&#x0;s&#x0;t&#x0;&#x0;&#x0;&#x2;&#x0;&#xc;&#x0;&#x0;&#x0;&#x0;&#x0;6&#x0;U&#x0;ï¿½ï¿½ï¿½&#x0;6&#x0;&#xc;&#xc;&#x0;&#x0;ï¿½4ï¿½&#x0;0&#x6;	&#x0;H&#x0;y&#x0;p&#x0;e&#x0;r&#x0;l&#x0;i&#x0;n&#x0;k&#x0;&#x0;&#x0;&#xc;&#x0;&gt;*&#x1;B*&#x7;ph&#x0;&#x0;ï¿½&#x0;&gt;&#x0;&#x1f;@&#x1;&#x0;&#x2;&#x1;&gt;&#x0;&#xc;&#xc;&#x11;&#x0;ï¿½4ï¿½&#x0;0&#x6;&#x6;&#x0;H&#x0;e&#x0;a&#x0;d&#x0;e&#x0;r&#x0;&#x0;&#x0;&#x17;&#x0;&#x10;&#x0;&#xd;ï¿½&#x8;&#x0;&#x2;H&#x12;ï¿½$&#x1;&#x2;&#x12;dï¿½&#x0;&#x1;&#x0;&#x14;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;.&#x0;ï¿½&#xf;ï¿½&#x0;&#x11;&#x1;.&#x0;&#xc;&#x0;&#x10;&#x0;ï¿½4ï¿½&#x0;0&#x6;&#xb;&#x0;H&#x0;e&#x0;a&#x0;d&#x0;e&#x0;r&#x0; &#x0;C&#x0;h&#x0;a&#x0;r&#x0;&#x0;&#x0;&#x0;&#x0;&gt;&#x0; @&#x1;&#x0;&quot;&#x1;&gt;&#x0;&#xc;&#xc;&#x13;&#x0;ï¿½4ï¿½&#x0;0&#x6;&#x6;&#x0;F&#x0;o&#x0;o&#x0;t&#x0;e&#x0;r&#x0;&#x0;&#x0;&#x17;&#x0;&#x12;&#x0;&#xd;ï¿½&#x8;&#x0;&#x2;H&#x12;ï¿½$&#x1;&#x2;&#x12;dï¿½&#x0;&#x1;&#x0;&#x14;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;.&#x0;ï¿½&#xf;ï¿½&#x0;1&#x1;.&#x0;&#xc;&#x0;&#x12;&#x0;ï¿½4ï¿½&#x0;0&#x6;&#xb;&#x0;F&#x0;o&#x0;o&#x0;t&#x0;e&#x0;r&#x0; &#x0;C&#x0;h&#x0;a&#x0;r&#x0;&#x0;&#x0;&#x0;&#x0;R&#x0;ï¿½&#x0;&#x1;&#x0;B&#x1;R&#x0;&#xc;&#xd;&#x15;&#x0;ï¿½4ï¿½&#x0;0&#x6;&#xc;&#x0;B&#x0;a&#x0;l&#x0;l&#x0;o&#x0;o&#x0;n&#x0; &#x0;T&#x0;e&#x0;x&#x0;t&#x0;&#x0;&#x0;&#xc;&#x0;&#x14;&#x0;&#x12;dï¿½&#x0;&#x1;&#x0;&#x14;ï¿½&#x0;&#x0;&#x14;&#x0;CJ&#x10;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x10;&#x0;N&#x0;ï¿½&#xf;ï¿½ï¿½Q&#x1;N&#x0;&#xc;&#x1;&#x14;&#x0;ï¿½4ï¿½&#x0;0&#x6;&#x11;&#x0;B&#x0;a&#x0;l&#x0;l&#x0;o&#x0;o&#x0;n&#x0; &#x0;T&#x0;e&#x0;x&#x0;t&#x0; &#x0;C&#x0;h&#x0;a&#x0;r&#x0;&#x0;&#x0;&#x14;&#x0;CJ&#x10;&#x0;OJ&#x3;&#x0;QJ&#x3;&#x0;^J&#x3;&#x0;aJ&#x10;&#x0;R&#x0;ï¿½&#xf;ï¿½ï¿½a&#x1;R&#x0;&#xc;&#x0;&#x3;&#x0;ï¿½4ï¿½&#x0;ï¿½&#x0;&#xe;&#x0;H&#x0;e&#x0;a&#x0;d&#x0;i&#x0;n&#x0;g&#x0; &#x0;3&#x0; &#x0;C&#x0;h&#x0;a&#x0;r&#x0;&#x0;&#x0;&#x1e;&#x0;5&#x8;&#x1;CJ&#x1b;&#x0;OJ&#x0;&#x0;PJ&#x0;&#x0;QJ&#x0;&#x0;\&#x8;&#x1;^J&#x0;&#x0;aJ&#x1b;&#x0;P&#x0;ï¿½&#xf;&#x1;&#x0;r&#x1;P&#x0;&#xc;&#x0;&#x0;&#x0;ï¿½4ï¿½&#x0;&#x0;&#x0;&#x4;&#x0;n&#x0;u&#x0;l&#x0;l&#x0;&#x0;&#x0;&#x16;&#x0;&#x17;&#x0;&#x12;dï¿½&#x0;&#x1;&#x0;&#x13;ï¿½d&#x0;&#x14;ï¿½d&#x0;[$&#x1;\$&#x1;&#x18;&#x0;CJ&#x18;&#x0;OJ&#x0;&#x0;PJ&#x0;&#x0;QJ&#x0;&#x0;^J&#x0;&#x0;aJ&#x18;&#x0;*&#x0;ï¿½Oï¿½ï¿½ï¿½&#x1;*&#x0;&#xc;&#x0;&#x0;&#x0;ï¿½&#x15;ï¿½&#x0;&#x0;&#x0;&#x5;&#x0;c&#x0;a&#x0;p&#x0;s&#x0;1&#x0;&#x0;&#x0;&#x8;&#x0;CJ&#x16;&#x0;aJ&#x16;&#x0;D&#x0;ï¿½@&#x1;&#x0;ï¿½&#x1;D&#x0;&#xc;&#x14;&#x0;&#x0;ï¿½&#x15;ï¿½&#x0; &#x2;&#xe;&#x0;L&#x0;i&#x0;s&#x0;t&#x0; &#x0;P&#x0;a&#x0;r&#x0;a&#x0;g&#x0;r&#x0;a&#x0;p&#x0;h&#x0;&#x0;&#x0;&#xd;&#x0;&#x19;&#x0;&#xf;ï¿½ï¿½&#x2;^ï¿½ï¿½&#x2;m$&#x1;&#x0;&#x0;&#x0;H&#x0;ï¿½`ï¿½ï¿½ï¿½&#x1;H&#x0;&#xc;&#x14;&#x0;&#x0;ï¿½Z&#x18;&#x0;&#x10;&#x0;&#xd;
&#x0;N&#x0;o&#x0; &#x0;S&#x0;p&#x0;a&#x0;c&#x0;i&#x0;n&#x0;g&#x0;&#x0;&#x0;&#x2;&#x0;&#x1a;&#x0;&#x18;&#x0;CJ&#x16;&#x0;_H&#x1;&#x4;aJ&#x16;&#x0;mH	&#x4;sH	&#x4;tH	&#x4;B&#x0;ï¿½Oï¿½&#x0;ï¿½&#x1;B&#x0;&#xc;&#x0;&#x0;&#x0;ï¿½3ï¿½&#x0;&#x0;&#x0;&#x15;&#x0;a&#x0;p&#x0;p&#x0;l&#x0;e&#x0;-&#x0;c&#x0;o&#x0;n&#x0;v&#x0;e&#x0;r&#x0;t&#x0;e&#x0;d&#x0;-&#x0;s&#x0;p&#x0;a&#x0;c&#x0;e&#x0;&#x0;&#x0;&#x0;&#x0;PK&#x3;&#x4;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;ï¿½ï¿½&#xf;ï¿½ï¿½&#x0;&#x0;&#x0;&#x1c;&#x2;&#x0;&#x0;&#x13;&#x0;&#x0;&#x0;[Content_Types].xmlï¿½ï¿½ï¿½Nï¿½0&#x10;Eï¿½Hï¿½ï¿½ï¿½-Jï¿½ï¿½@&#x8;%ï¿½ÇÇ¢|ï¿½È$&#x16;ï¿½Ø²ï¿½Uï¿½ï¿½Lï¿½TBï¿½ &#x16;l,ï¿½3ï¿½ï¿½;ï¿½rï¿½&#x1f;&#x7;ï¿½Ãï¿½ï¿½Jï¿½ï¿½B+$ï¿½&#x1b;G]ï¿½ï¿½7OÙ­Vï¿½ï¿½&#x1a;&#x18;&lt;aï¿½&#xf;ï¿½ï¿½ï¿½ï¿½(7ï¿½ï¿½Iï¿½ï¿½Rï¿½{ï¿½pgLï¿½=ï¿½ï¿½r&#x1f;ï¿½ï¿½ï¿½ï¿½8&#x2;ï¿½5v&amp;ï¿½ï¿½ï¿½&#xe;ï¿½uQï¿½&#x18;ë8ï¿½ï¿½Cï¿½ï¿½&#x3;ï¿½ï¿½&#x1d;X=ï¿½ï¿½ï¿½ï¿½$&#x2434;ï¿½?6Nï¿½JC&#x8;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Fï¿½&#x16;B.Ê¹&apos;ï¿½.ï¿½+ï¿½ï¿½ï¿½Yï¿½Tï¿½&#x19;ï¿½ï¿½^e5ï¿½5ï¿½ï¿½ ï¿½&#xb;ï¿½&#x12;Ã°&#xc;ï¿½_ï¿½g &#x19;-ï¿½;ï¿½ï¿½ï¿½ï¿½ï¿½Ylï¿½Ýï¿½ï¿½|6^ï¿½Nï¿½ï¿½&#x14;`ï¿½?ï¿½&#x13;ï¿½ï¿½&#x7f;[&#x7f;&#x2;&#x0;&#x0;ï¿½ï¿½&#x3;&#x0;PK&#x3;&#x4;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;ï¿½Ö§ï¿½ï¿½&#x0;&#x0;&#x0;6&#x1;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;_rels/.relsï¿½ï¿½ï¿½jï¿½0&#xc;ï¿½ï½ï¿½ï¿½}Qï¿½ï¿½&#x18;%v/ï¿½ï¿½C/ï¿½}&#x0;ï¿½(&#x7f;h&quot;&#x1b;ï¿½&#x1b;ï¿½ï¿½Oï¿½&#x6;&#xd;
ï¿½&#x8;ï¿½ï¿½ï¿½ï¿½ï¿½=ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ &#x16;ï¿½ï¿½&#x6;ï¿½ï¿½C?ï¿½hï¿½v=ï¿½&#x7f;ï¿½Éï¿½ï¿½%&#x8;[xpï¿½ï¿½{Ûµ_ï¿½PÑ£&lt;ï¿½1&#x1b;ï¿½Hï¿½0ï¿½&#x12;&#xf;ï¿½ï¿½Oï¿½Rï¿½Bdï¿½ï¿½&#x10;ï¿½JEï¿½4b$&#x7f;ï¿½ï¿½q_ï¿½&#x1f;ï¿½ï¿½&#x19;ï¿½6Lï¿½ï¿½&#x16;Rï¿½7`ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½0ÌOï¿½&#x7f;ï¿½,ï¿½E&#x4;n7ï¿½Liï¿½bï¿½ï¿½/ï¿½Sï¿½ï¿½ï¿½eï¿½ï¿½&#x1e;Ðµï¿½ï¿½ï¿½ï¿½&#x1;&#x0;&#x0;ï¿½ï¿½&#x3;&#x0;PK&#x3;&#x4;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;kyï¿½&#x16;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x1c;&#x0;&#x0;&#x0;theme/theme/themeManager.xml&#xc;ï¿½M&#xd;
ï¿½ &#x10;@ï¿½}ï¿½wï¿½ï¿½7cï¿½(Ebï¿½Ë®ï¿½ï¿½&#x0;Cï¿½&#x1a;AÇ Òï¿½ï¿½ï¿½ï¿½7ï¿½ï¿½&#x14;ÕK&#xd;Y,ï¿½&#x7;&#xd;ï¿½eï¿½.ï¿½ï¿½ï¿½|,ï¿½&#x1b;ï¿½ï¿½H&#x1c;ï¿½,lï¿½ï¿½&#x15;ï¿½ï¿½x&#x18;É´ï¿½&#x13;ï¿½Iï¿½sQ}#Õï¿½ï¿½ï¿½ï¿½ Öµ+ï¿½!ï¿½,ï¿½^ï¿½$j=ï¿½GWï¿½ï¿½ï¿½)ï¿½Eï¿½+&amp;&#xd;
&#x2;8ï¿½&#x1;&#x0;&#x0;ï¿½ï¿½&#x3;&#x0;PK&#x3;&#x4;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;ï¿½R%ï¿½ï¿½&#x6;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;theme/theme/theme1.xmlï¿½Y]ï¿½ï¿½F&#x14;}/ï¿½?&#x8;ï¿½;ï¿½ï¿½ï¿½ï¿½ï¿½&#x1b;lï¿½Î¶ï¿½MBï¿½ï¿½qlï¿½ï¿½É4F3Þ	ï¿½ï¿½&lt;&#x16;&#xd;
ï¿½iï¿½C&#x3;}ï¿½Ci&#x1b;Hï¿½/ï¿½ï¿½6ï¿½M!&#x7f;ï¿½wFï¿½&lt;cï¿½ï¿½ï¿½%ï¿½ï¿½d&#xd;ï¿½4:ï¿½Î{ï¿½ï¿½&#x1d;Iï¿½ï¿½Üï¿½sï¿½&#x13;NXï¿½pï¿½ï¿½&#xd;
ï¿½ï¿½ï¿½!&#x1b;ï¿½xï¿½poï¿½ï¿½ï¿½ï¿½ï¿½pï¿½ï¿½&#x11;ï¿½,ï¿½&#xd;wï¿½ï¿½{eï¿½ï¿½&#xf;.ï¿½&#x1d;&#x11;ï¿½&#x8;;`&#x1f;ï¿½&#x1d;ï¿½pC!ï¿½;ï¿½&lt;&#x1f;ï¿½0ï¿½ï¿½&#x14;ï¿½pmÌ&#x8;	8M&amp;ï¿½Qï¿½ï¿½ï¿½oDï¿½Bï¿½ï¿½ï¿½&#x10;ï¿½]&apos;F&#x11;ï¿½ï¿½1&#x1e;ï¿½!vï¿½Ò¥ï¿½ï¿½tÞ¡p&#x1a;&#xb;.&#x7;ï¿½4ï¿½Iï¿½Ø°Pï¿½ï¿½aQ&quot;ï¿½ï¿½&#x7;4qï¿½&#x10;mï¿½0Ï&#x1d;ï¿½ï¿½}ï¿½:&#x14;q&#x1;&#x17;&#x1a;nAï¿½ï¿½ï¿½ï¿½ï¿½yï¿½ï¿½0ï¿½bï¿½ï¿½fï¿½U&#x7f;&#xb;ï¿½ï¿½ï¿½è°¤ï¿½L&amp;ï¿½lRï¿½ï¿½J3ï¿½&#x0;Tlï¿½:ï¿½Nï¿½Sï¿½ï¿½)&#x0;&#x1a;&#xe;aï¿½)&#x17;Ý§ßªï¿½ï¿½ï¿½&#x2;ï¿½ï¿½ï¿½Cï¿½ï¿½vï¿½].&#x1a;xï¿½&#x7f;yï¿½sÓ?&#x3;ï¿½@ï¿½&#x7f;o&#x3;ï¿½ï¿½&#x6;&#x10;E&#x3;ï¿½@)ï¿½ï¿½ï¿½{^ï¿½&#x14;x&#x6;^ï¿½R|e&#x3;_-4ï¿½^ï¿½ï¿½+PHI|ï¿½ï¿½.ï¿½ï¿½rï¿½\m&#x6;&#x19;3ï¿½gï¿½ï¿½}ï¿½[--ï¿½ï¿½PP&#xd;Yuï¿½)ï¿½,&#x16;ï¿½j-Bï¿½Xï¿½&#x5;ï¿½&#x4;R$Hï¿½ï¿½&#x14;ï¿½ï¿½&#x10;ï¿½8@ï¿½&#xc;&#x12;ï¿½ï¿½I&#x8;ï¿½7E1ï¿½0\(&#x15;ï¿½ï¿½2ï¿½ï¿½?O&#x1d;ï¿½ï¿½ï¿½&#x1d;ï¿½4kï¿½&#xb;ï¿½ï¿½!ï¿½ï¿½ï¿½ÃLEï¿½ï¿½&#x18;ï¿½ï¿½&#x1a;ï¿½ï¿½ï¿½&#x1f;&#x7fc;|ï¿½&lt;zqï¿½èÇO&#x1e;ï¿½ï¿½:2ï¿½ï¿½P&lt;Ñ­^&#x7f;ï¿½ï¿½ï¿½O?uï¿½zï¿½ï¿½ï¿½&apos;_ï¿½ï¿½\ï¿½ï¿½ï¿½ï¿½gï¿½ï¿½ï¿½ï¿½&#x1d;&#x8;+]ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½xï¿½ï¿½ï¿½7ï¿½ï¿½ï¿½ï¿½&#x13;&#xb;ï¿½ï¿½ï¿½ï¿½&#xe;ï¿½&#x8;sï¿½:&gt;vnï¿½&#x8;&#x16;ï¿½B`2Çï¿½ï¿½,ï¿½!&quot;ï¿½E3ï¿½p&#x14;#9ï¿½ï¿½&#x7f;Gï¿½&#x6;ï¿½ï¿½&#x1c;Qdï¿½ï¿½ï¿½&#x19;ï¿½;	Hï¿½&#xd;xuvï¿½ ï¿½&#xb;ï¿½ï¿½ &#x16;ï¿½ï¿½ï¿½ï¿½&#x0;&#x1e;0F[,ï¿½FáK&#xb;s&#x7f;&#x16;Oï¿½&apos;3&#x1d;w&#xb;ï¿½#ï¿½ï¿½&#x1;ï¿½ï¿½ï¿½vfSï¿½Vbs&#x19;ï¿½Ø yï¿½ï¿½Xï¿½	ï¿½ï¿½pï¿½5vï¿½ï¿½euw	1ï¿½z@ï¿½	ï¿½l,ï¿½ï¿½ï¿½i!b&#xd;Iï¿½&#xc;ï¿½jZ&#x19;ï¿½&#x8;ï¿½2ï¿½&#x11;ï¿½|&#x1b;ï¿½9ï¿½ï¿½&#x18;ï¿½ï¿½ï¿½ï¿½ï¿½L$ï¿½&#x15;ï¿½Zï¿½ï¿½15ï¿½x&#x15;ï¿½&#x4;ï¿½l.ï¿½(ï¿½zï¿½ï¿½ï¿½&#x8;m${ï¿½dï¿½ï¿½:\@ï¿½&apos;ï¿½2ï¿½3&#x9c;ï¿½ln$ï¿½^-ï¿½ï¿½@^ï¿½i?ï¿½ï¿½ï¿½D&amp;ï¿½&#x1c;ï¿½|ï¿½#ï¿½tdï¿½&#x1d;&#x6;!ï¿½ï¿½6lï¿½Ä¡ï¿½ï¿½ï¿½&#x1f;Bï¿½&quot;ï¿½&amp;&#x13;6ï¿½&#x1;3ï¿½&#x10;y&#xe;y@ï¿½ï¿½tï¿½!ï¿½Hï¿½ï¿½jp&#x1b;ï¿½Uï¿½ï¿½*&#x10;yeï¿½Xry&#x15;3ï¿½~{s:FXI&#xd;&#x8;ï¿½ï¿½ï¿½&#x11;ï¿½O&#x15;ï¿½5Yï¿½ï¿½[Y&#x7;!}ï¿½ï¿½SËª.ï¿½ï¿½7&#x13;bï¿½ï¿½ï¿½ï¿½d|&#x1b;n]ï¿½&#x3;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½6ï¿½ï¿½71ï¿½.ï¿½&#xd;ï¿½tï¿½ï¿½nï¿½&#x7f;/ï¿½ï¿½ï¿½ï¿½w/ï¿½+ï¿½&#x6;ï¿½ï¿½[ï¿½tï¿½ï¿½6ï¿½ï¿½ï¿½}ï¿½ï¿½Pï¿½&#x13;sï¿½ï¿½ï¿½Úºsï¿½Lï¿½.&#xc;J;ï¿½Ìï¿½ï¿½i&#x8;ï¿½ï¿½Nï¿½	&#xc;ï¿½$Aï¿½ï¿½Iï¿½ï¿½ï¿½ï¿½ï¿½&#x17;ï¿½)ï¿½ï®t2ï¿½&#xb;ï¿½&#x13;ï¿½L&#x19;ï¿½mï¿½&#x1a;ï¿½ï¿½ï¿½x:ï¿½&#xe;ï¿½(}\-&#x16;ï¿½i*&#x1e;&#x1c;ï¿½ï¿½xï¿½ï¿½ï¿½ï¿½QCï¿½ï¿½Juï¿½&#x8;ï¿½ï¿½Wl&apos;ï¿½QyI@Ú¾&#xd;	m2ï¿½Dï¿½Bï¿½ï¿½&#x1c;ï¿½AR&#xf;ï¿½&#x10;4&#xb;	ï¿½ï¿½wÂ¢naQï¿½î©ï¿½`&#x1;Ô²ï¿½ï¿½ï¿½É&#xd;Wï¿½ï¿½=0&#x1;#xï¿½B&#x14;ï¿½dï¿½ï¿½T/ï¿½ï¿½ï¿½ï¿½.3ï¿½-ï¿½F&#x5;ï¿½&gt;bY&#x1;ï¿½Lï¿½%&#x5ed;Ëï¿½KKï¿½&#xc;ï¿½6Hhï¿½fï¿½Pï¿½Q=ï¿½ï¿½hï¿½&#x17;ï¿½)Gï¿½Bï¿½ms]_ï¿½Ô &apos;Cï¿½ï¿½ï¿½ZÑ¨ï¿½ï¿½ï¿½ï¿½ys&#xd;vï¿½ï¿½@c])hï¿½&#x1c;7ï¿½JÙï¿½&#x19;ï¿½iï¿½&#x1d;ï¿½c?&#x1c;FSï¿½&#x1d;.ï¿½ï¿½ï¿½Nï¿½ï¿½ï¿½P$ï¿½&#xd;&#x7f;&#x1e;eï¿½&amp;\ï¿½&#x11;&#xf;Ó+ï¿½Iï¿½ &quot;&#x2;&apos;&#xe;%QÃï¿½ï¿½ï¿½@cï¿½!ï¿½[ï¿½&#x4;ï¿½paï¿½ï¿½AV.&#x1a;9Hï¿½ï¿½d&lt;&#x1e;ï¿½ï¿½Ó®ï¿½ï¿½Hï¿½ï¿½ï¿½ï¿½VXï¿½*ï¿½ï¿½%ï¿½Aï¿½{ï¿½ï¿½ï¿½&#x19;ï¿½Yr&#xb;Aï¿½ï¿½Õ¢&#xc;ï¿½pxï¿½SLï¿½9&quot;ï¿½:3&#x13;ï¿½Uï¿½ï¿½5ï¿½ï¿½ï¿½ï¿½ï¿½&#x13;U&#xd;ï¿½ï¿½NCï¿½ï¿½(ï¿½ï¿½ï¿½p%ï¿½&#x19;&#x1d;uï¿½ï¿½@;[ï¿½&#x19;&#x2;ï¿½ï¿½dï¿½&#x8;&#x7;&#x13;ï¿½`ï¿½ï¿½&#x1a;ï¿½4ï¿½&#x1a;)ï¿½ï¿½]ï¿½t#&#x19;9M4W=ï¿½P&#x15;ï¿½5ï¿½*fÌ°l&#x3;kï¿½&lt;_ï¿½ï¿½X-C&#xc;ï¿½ï¿½wï¿½Tï¿½ï¿½%ï¿½ï¿½Ôºï¿½}Bï¿½% ï¿½Yï¿½,]ï¿½&#xc;&#xd;Aï¿½ï¿½ï¿½Ì &amp;&#x19;oÊ°ï¿½ï¿½Å¨ï¿½;ï¿½&#xb;&lt;ï¿½ï¿½Yï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ûµï¿½e=ï¿½:&#x1d;&#xc;ï¿½ï¿½ï¿½ï¿½zï¿½ï¿½ï¿½xï¿½ï¿½Tï¿½Vï¿½=ï¿½O&#x13;lp&#xf;Ä£&#xd;/ï¿½gTpï¿½Jï¿½ï¿½ ï¿½&#x10;ï¿½Ô$ï¿½&#xd;ï¿½Eï¿½Å­&#x1;Gï¿½,!&#xd;ï¿½Aï¿½ozAï¿½&#xf;rï¿½ï¿½ï¿½ï¿½yeï¿½ï¿½ï¿½ï¿½ï¿½rï¿½ï¿½ï¿½ï¿½bï¿½/&#x16;Ú­ï¿½Ch,&quot;ï¿½ï¿½~ï¿½Í¥&#xb;ï¿½ï¿½ï¿½|ï¿½ï¿½Eï¿½o|}ï¿½ï¿½oï¿½.&#xd;Yï¿½gï¿½ï¿½J^&#x11;W__ï¿½ï¿½ï¿½__&#x1c;&#x2;ï¿½ï¿½Rï¿½ï¿½ï¿½ï¿½V%W/7ï¿½9ï¿½Ýªï¿½ï¿½Aï¿½ï¿½kWï¿½jï¿½ï¿½&#xe;ï¿½Zï¿½ï¿½ï¿½uï¿½&#x14;ï¿½kï¿½&#x3;ï¿½Ò©ï¿½*ï¿½ ï¿½yï¿½ï¿½ï¿½_ï¿½ï¿½^ï¿½ï¿½ï¿½ï¿½Zï¿½k&gt;\lc`ï¿½|,b&#x1;ï¿½Uï¿½vï¿½&#x1;&#x0;&#x0;ï¿½ï¿½&#x3;&#x0;PK&#x3;&#x4;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;&#xd;Ñï¿½ï¿½&#x0;&#x0;&#x0;&#x1b;&#x1;&#x0;&#x0;&apos;&#x0;&#x0;&#x0;theme/theme/_rels/themeManager.xml.relsï¿½ï¿½M&#xd;
ï¿½0&#x14;ï¿½ï¿½ï¿½w&#x8;ooÓº&#x10;ï¿½&amp;ÝÐ­ï¿½&#x3;ï¿½ï¿½5&#xd;6?$Qï¿½ï¿½&#xd;ï¿½,&#x8;.ï¿½aï¿½ï¿½iï¿½ï¿½ï¿½ï¿½&#x13;c2ï¿½1hï¿½&#x1a;&#x8;:ï¿½qï¿½ï¿½mï¿½ï¿½@R&#x16;Nï¿½ï¿½;dï¿½`ï¿½ï¿½o7ï¿½&#x15;gï¿½K(M&amp;$R(.1ï¿½r&#xe;&apos;Jï¿½ï¿½ÐTï¿½ï¿½ï¿½8ï¿½ï¿½Vï¿½&quot;ï¿½ï¿½AÈ»ï¿½Hï¿½u}ï¿½ï¿½&#x1;|ï¿½$ï¿½b&#x10;{ï¿½&#x0;&#x19;ï¿½Pï¿½ï¿½ï¿½ï¿½8&#x1a;ï¿½g/&#x1f;&#x16;]ï¿½QAsÙ&#x5;(ï¿½ï¿½ï¿½ï¿½#ï¿½ï¿½L&#x4;ï¿½[ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;ï¿½ï¿½&#x3;&#x0;PK&#x1;&#x2;-&#x0;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;ï¿½ï¿½&#xf;ï¿½ï¿½&#x0;&#x0;&#x0;&#x1c;&#x2;&#x0;&#x0;&#x13;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;[Content_Types].xmlPK&#x1;&#x2;-&#x0;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;ï¿½Ö§ï¿½ï¿½&#x0;&#x0;&#x0;6&#x1;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;0&#x1;&#x0;&#x0;_rels/.relsPK&#x1;&#x2;-&#x0;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;kyï¿½&#x16;ï¿½&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x1c;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x2;&#x0;&#x0;theme/theme/themeManager.xmlPK&#x1;&#x2;-&#x0;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;ï¿½R%ï¿½ï¿½&#x6;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;theme/theme/theme1.xmlPK&#x1;&#x2;-&#x0;&#x14;&#x0;&#x6;&#x0;&#x8;&#x0;&#x0;&#x0;!&#x0;&#xd;Ñï¿½ï¿½&#x0;&#x0;&#x0;&#x1b;&#x1;&#x0;&#x0;&apos;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½	&#x0;&#x0;theme/theme/_rels/themeManager.xml.relsPK&#x5;&#x6;&#x0;&#x0;&#x0;&#x0;&#x5;&#x0;&#x5;&#x0;]&#x1;&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;&#x0;&#x0;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;a:clrMap xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; bg1=&quot;lt1&quot; tx1=&quot;dk1&quot; bg2=&quot;lt2&quot; tx2=&quot;dk2&quot; accent1=&quot;accent1&quot; accent2=&quot;accent2&quot; accent3=&quot;accent3&quot; accent4=&quot;accent4&quot; accent5=&quot;accent5&quot; accent6=&quot;accent6&quot; hlink=&quot;hlink&quot; folHlink=&quot;folHlink&quot;/&gt;&#x0;&#x0;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;&#x13;&#x0;&#x0;:&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;	&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;.&#x0;&#x0;&#x0;.&#x0;&#x0;&#x0;L&#x0;&#x0;&#x0;L&#x0;&#x0;&#x0;L&#x0;&#x0;&#x0;O&#x0;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;i	&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;&#xe;&#xc;&#x0;&#x0;@&#xf;&#x0;&#x0;}&#x11;&#x0;&#x0;ï¿½&#x18;&#x0;&#x0;E&#x1b;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;&#xf;&#x0;&#x0;&#x0;&#x11;&#x0;&#x0;&#x0;&#x12;&#x0;&#x0;&#x0;&#x13;&#x0;&#x0;&#x0;&#x15;&#x0;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;&#x18;&#x0;&#x0;&#x0;&#x1a;&#x0;&#x0;&#x0;&#x1c;&#x0;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;0&#xd;&#x0;&#x0;ï¿½&#x12;&#x0;&#x0;ï¿½&#x1a;&#x0;&#x0;g&#x1d;&#x0;&#x0;ï¿½&#x1d;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x14;&#x0;&#x0;&#x0;&#x17;&#x0;&#x0;&#x0;&#x19;&#x0;&#x0;&#x0;&#x1b;&#x0;&#x0;&#x0;.&#x0;&#x0;&#x0;F&#x0;&#x0;&#x0;H&#x0;&#x0;&#x0;O&#x0;&#x0;&#x0;&#x13;!&#x14;ï¿½ï¿½ï¿½&#xf;&#x0;&#x0;ï¿½8&#x0;&#x0;&#x0;&#x0;&#x0;&#x6;ï¿½&#x18;&#x0;&#x0;&#x0;&#x2;&#x4;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;@&#x0;&#x1e;ï¿½&#x10;&#x0;&#x0;&#x0;ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;ï¿½ï¿½ï¿½&#x0;ï¿½&#x0;&#x0;&#x10;&#x0;&#xf;&#x0;&#x2;ï¿½&#x0;&#x0;&#x0;&#x10;&#x0;&#x8;ï¿½&#x8;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x1;&#x4;&#x0;&#x0;&#xf;&#x0;&#x3;ï¿½0&#x0;&#x0;&#x0;&#xf;&#x0;&#x4;ï¿½(&#x0;&#x0;&#x0;&#x1;&#x0;	ï¿½&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x2;&#x0;&#xd;
ï¿½&#x8;&#x0;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x5;&#x0;&#x0;&#x0;&#xf;&#x0;&#x4;ï¿½B&#x0;&#x0;&#x0;&#x12;&#x0;&#xd;
ï¿½&#x8;&#x0;&#x0;&#x0;&#x1;&#x4;&#x0;&#x0;&#x0;&#xe;&#x0;&#x0;S&#x0;&#xb;ï¿½&#x1e;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x10;&#x0;ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x8;&#x0;&#x4;&#x3;	&#x0;&#x0;&#x0;?&#x3;&#x1;&#x0;&#x1;&#x0;&#x0;&#x0;&#x11;ï¿½&#x4;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;v&#xf;&#x0;&#x0;&#x7f;&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;ï¿½&#xf;&#x0;&#x0;d&#x15;&#x0;&#x0;f&#x15;&#x0;&#x0;g&#x15;&#x0;&#x0;i&#x15;&#x0;&#x0;j&#x15;&#x0;&#x0;l&#x15;&#x0;&#x0;m&#x15;&#x0;&#x0;o&#x15;&#x0;&#x0;p&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;&#x7;&#x0;&#x1c;&#x0;&#x7;&#x0;&#x1c;&#x0;&#x7;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;d&#x15;&#x0;&#x0;f&#x15;&#x0;&#x0;g&#x15;&#x0;&#x0;i&#x15;&#x0;&#x0;j&#x15;&#x0;&#x0;l&#x15;&#x0;&#x0;m&#x15;&#x0;&#x0;o&#x15;&#x0;&#x0;p&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;&#x7;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x7;&#x0;&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;&#x0;&#x14;&#x0;&#x0;&#x0;0&#x0;&#x0;&#x0;0&#x0;&#x0;&#x0;?&#x0;&#x0;&#x0;B&#x0;&#x0;&#x0;	&#x1;&#x0;&#x0;&#x12;&#x1;&#x0;&#x0;&#x19;&#x1;&#x0;&#x0;&#x1c;&#x1;&#x0;&#x0;D&#x1;&#x0;&#x0;S&#x1;&#x0;&#x0;u&#x1;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&quot;&#x2;&#x0;&#x0;#&#x2;&#x0;&#x0;$&#x2;&#x0;&#x0;%&#x2;&#x0;&#x0;a&#x2;&#x0;&#x0;e&#x2;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½&#x5;&#x0;&#x0;ï¿½&#x5;&#x0;&#x0;ï¿½&#x5;&#x0;&#x0;ï¿½&#x5;&#x0;&#x0;ï¿½&#x5;&#x0;&#x0;d&#x7;&#x0;&#x0;i&#x7;&#x0;&#x0;t&#x7;&#x0;&#x0;ï¿½&#x7;&#x0;&#x0;ï¿½&#x7;&#x0;&#x0;ï¿½&#x7;&#x0;&#x0;ï¿½&#x7;&#x0;&#x0;ï¿½&#x7;&#x0;&#x0;ï¿½&#x7;&#x0;&#x0;&#x6;&#x8;&#x0;&#x0;&#x1e;&#x8;&#x0;&#x0;&#x1f;&#x8;&#x0;&#x0;$&#x8;&#x0;&#x0;$&#x8;&#x0;&#x0;&apos;&#x8;&#x0;&#x0;(&#x8;&#x0;&#x0;L	&#x0;&#x0;}	&#x0;&#x0;~	&#x0;&#x0;ï¿½	&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#xd;
&#x0;&#x0;ï¿½&#x10;&#x0;&#x0;ï¿½&#x10;&#x0;&#x0;&#x5;&#x11;&#x0;&#x0;&#x6;&#x11;&#x0;&#x0;&#x7;&#x11;&#x0;&#x0;&#xe;&#x11;&#x0;&#x0;!&#x11;&#x0;&#x0;!&#x11;&#x0;&#x0;.&#x11;&#x0;&#x0;1&#x11;&#x0;&#x0;B&#x13;&#x0;&#x0;B&#x13;&#x0;&#x0;C&#x13;&#x0;&#x0;D&#x13;&#x0;&#x0;ï¿½&#x13;&#x0;&#x0;ï¿½&#x13;&#x0;&#x0;&#x8;&#x14;&#x0;&#x0;9&#x14;&#x0;&#x0;c&#x15;&#x0;&#x0;d&#x15;&#x0;&#x0;p&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x7;&#x0;&#x4;&#x0;&#x7;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x7;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x7;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x4;&#x0;&#x3;&#x0;&#x2;&#x0;&#x2;&#x0;&#x4;&#x0;&#x7;&#x0;&#x4;&#x0;&#x2;&#x0;&#xd;&#x0;x91 &#x16;`&#x6;ï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;&#x5;Dï¿½&amp;ï¿½ï¿½F`ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;L&#x2;ï¿½*ï¿½&#xc;ï¿½ï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;V)q,ï¿½ï¿½&#x8;ï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;&#x0;f)3ï¿½aTï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;YXï¿½;ï¿½f&#x18;&#x1f;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;ï¿½Rï¿½?vï¿½ï¿½uï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;D	ï¿½Bï¿½eï¿½Tï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;&#x14;zï¿½Iï¿½ï¿½.ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;&#x1;s?]ï¿½&#xd;
&#xc;ï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;ï¿½Eï¿½eH*ï¿½3ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;faï¿½rï¿½ï¿½ï¿½ï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;ï¿½&#x17;ï¿½|ï¿½&#x1;&#xd;
ï¿½ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;ï¿½&#xf;&#x10;&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x2;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x2;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x5;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x5;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½p&#x8;&#x11;ï¿½ï¿½ï¿½^ï¿½p&#x8;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½@&#xb;&#x11;ï¿½ï¿½ï¿½^ï¿½@&#xb;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½&#x10;&#xe;&#x11;ï¿½ï¿½ï¿½^ï¿½&#x10;&#xe;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x10;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x10;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x13;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x13;`ï¿½ï¿½ï¿½OJ&#x1;&#x0;QJ&#x1;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x19;&#x10;&#x0;&#x0;&#xf;ï¿½ï¿½&#x16;&#x11;ï¿½ï¿½ï¿½^ï¿½ï¿½&#x16;`ï¿½ï¿½ï¿½OJ&#x6;&#x0;QJ&#x6;&#x0;^J&#x6;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;o&#x0;&#x1;&#x0;&#x0;&#x0;&#x17;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x15;&#x10;&#x0;&#x0;&#xf;ï¿½P&#x19;&#x11;ï¿½ï¿½ï¿½^ï¿½P&#x19;`ï¿½ï¿½ï¿½OJ&#x5;&#x0;QJ&#x5;&#x0;o(&#x0;ï¿½h&#x0;&#x0;&#x0;&#x0;ï¿½H&#x0;&#x0;&#x1;&#x0;ï¿½ï¿½&#xd;&#x0;&#x0;&#x0;L&#x2;ï¿½*&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;x91 &#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;s?]&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½Rï¿½?&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x14;zï¿½I&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;faï¿½r&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½Eï¿½e&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;D	ï¿½B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x5;Dï¿½&amp;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;V)q,&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;YXï¿½;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;f)3&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x17;ï¿½|&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#xd;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#xd;&#x0;&#x0;&#x0;&#x12;&#x0;&#x5;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x5;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x5;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x5;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x5;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x5;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x12;&#x0;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x1;&#x0;	&#x4;&#x3;&#x0;	&#x4;&#x5;&#x0;	&#x4;&#x3;&#x0;&#x1f;&#x12;&#x13;&#x19;ï¿½M&#x10;A&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½M&#x10;Aï¿½lï¿½c&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½lï¿½c&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x2;&#x0;&#x2;&#x0;*&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&apos;&#x0;&#x0;&#x0;g&#xf;&#xb;&#x0;ï¿½&lt;&#x13;&#x0;ï¿½Z&#x18;&#x0;ï¿½]&#x1e;&#x0;ï¿½&#x1;&#x1f;&#x0;ï¿½* &#x0;ï¿½&#x1d;+&#x0;&#x1e;P,&#x0;ï¿½v9&#x0;=t;&#x0;ï¿½p&lt;&#x0;A]C&#x0;&#xb;gL&#x0;|&#x2;M&#x0;&#x13;2R&#x0;i5Z&#x0;ï¿½-d&#x0;ï¿½!f&#x0;ï¿½&#x6;l&#x0;zUu&#x0;v%x&#x0;}ky&#x0;&#x4;&#xc;ï¿½&#x0;ï¿½4ï¿½&#x0;ï¿½Qï¿½&#x0;&#x7;=ï¿½&#x0;W&#x1e;ï¿½&#x0;4Qï¿½&#x0;ï¿½1ï¿½&#x0;ï¿½&lt;ï¿½&#x0;&#x4;uï¿½&#x0;;3ï¿½&#x0;ï¿½&#x15;ï¿½&#x0;ï¿½3ï¿½&#x0;&#xd;
&#x0;ï¿½&#x0;ï¿½*ï¿½&#x0;ï¿½;ï¿½&#x0;aPï¿½&#x0;ï¿½jï¿½&#x0;ï¿½Zï¿½&#x0;ï¿½_ï¿½&#x0;F[ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;d&#x15;&#x0;&#x0;f&#x15;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;ï¿½@&#x3;ï¿½&#x1;&#x0;ï¿½&#x2;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x1;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x2;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x15;&#x0;&#x0;ï¿½&#x0;&#x0;&#x10;&#x0;@&#x0;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x7;&#x0;U&#x0;n&#x0;k&#x0;n&#x0;o&#x0;w&#x0;n&#x0;ï¿½ï¿½&#x1;&#x0;&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#x0;&#x0;&#x2;&#x0;ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#x0;&#x0;&#x2;&#x0;ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;G&#x1e;ï¿½&#x1;&#x0;&#x0;&#x2;&#x2;&#x6;&#x3;&#x5;&#x4;&#x5;&#x2;&#x3;&#x4;ï¿½.&#x0;ï¿½Cx&#x0;ï¿½	&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;T&#x0;i&#x0;m&#x0;e&#x0;s&#x0; &#x0;N&#x0;e&#x0;w&#x0; &#x0;R&#x0;o&#x0;m&#x0;a&#x0;n&#x0;&#x0;&#x0;5&#x1e;ï¿½&#x1;&#x2;&#x0;&#x5;&#x5;&#x1;&#x2;&#x1;&#x7;&#x6;&#x2;&#x5;&#x7;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;S&#x0;y&#x0;m&#x0;b&#x0;o&#x0;l&#x0;&#x0;&#x0;3.ï¿½&#x1;&#x0;&#x0;&#x2;&#xb;&#x6;&#x4;&#x2;&#x2;&#x2;&#x2;&#x2;&#x4;ï¿½*&#x0;ï¿½Cx&#x0;ï¿½	&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;A&#x0;r&#x0;i&#x0;a&#x0;l&#x0;&#x0;&#x0;5.ï¿½&#x1;&#x0;&#x0;&#x2;&#xb;&#x6;&#x4;&#x3;&#x5;&#x4;&#x4;&#x2;&#x4;ï¿½.&#x0;ï¿½[`&#x0;ï¿½)&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;T&#x0;a&#x0;h&#x0;o&#x0;m&#x0;a&#x0;&#x0;&#x0;7.ï¿½&#x1;&#x0;&#x0;&#x2;&#xf;&#x5;&#x2;&#x2;&#x2;&#x4;&#x3;&#x2;&#x4;ï¿½&#x2;&#x0;ï¿½ï¿½ï¿½&#x0;@&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;C&#x0;a&#x0;l&#x0;i&#x0;b&#x0;r&#x0;i&#x0;&#x0;&#x0;;&#xe;ï¿½&#x1;&#x2;&#x0;&#x5;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;W&#x0;i&#x0;n&#x0;g&#x0;d&#x0;i&#x0;n&#x0;g&#x0;s&#x0;&#x0;&#x0;?=ï¿½&#x1;&#x0;&#x0;&#x2;&#x7;&#x3;	&#x2;&#x2;&#x5;&#x2;&#x4;&#x4;ï¿½*&#x0;ï¿½Cx&#x0;ï¿½	&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;C&#x0;o&#x0;u&#x0;r&#x0;i&#x0;e&#x0;r&#x0; &#x0;N&#x0;e&#x0;w&#x0;&#x0;&#x0;A&#x1e;ï¿½&#x1;&#x0;&#x0;&#x2;&#x4;&#x5;&#x3;&#x5;&#x4;&#x6;&#x3;&#x2;&#x4;ï¿½&#x2;&#x0;ï¿½ï¿½$&#x0;B&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;C&#x0;a&#x0;m&#x0;b&#x0;r&#x0;i&#x0;a&#x0; &#x0;M&#x0;a&#x0;t&#x0;h&#x0;&#x0;&#x0;&quot;&#x0;&#x4;&#x0;q&#x8;ï¿½&#x18;&#x0;ï¿½ï¿½&#x2;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x0;&#x0;{ï¿½&#x15;&#x7;.ï¿½&quot;ï¿½!ï¿½&#x2;&apos;&#x3;&#x0;&#x1;&#x0;&#x0;&#x0;1&#x3;&#x0;&#x0;3&#x12;&#x0;&#x0;&#x3;&#x0;&#xd;
&#x0;&#x0;&#x0;&#x4;&#x0;&#x3;ï¿½&amp;&#x0;&#x0;&#x0;1&#x3;&#x0;&#x0;3&#x12;&#x0;&#x0;&#x3;&#x0;&#xd;
&#x0;&#x0;&#x0;&amp;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;q&#x3;&#x0;ï¿½&#x10;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x5;ï¿½&#x5;ï¿½&#x0;ï¿½&#x0;ï¿½ï¿½r0&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;Z&#x15;&#x0;&#x0;Z&#x15;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xc;3ï¿½Q&#x0;ï¿½&#x10;&#x0;&#x8;&#x0;ï¿½ï¿½&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x8;HX&#x0;&#x0;&#x0;&#x0;	ï¿½ï¿½&#xf;&#x1;&#x8;$P&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;ï¿½ï¿½ï¿½&#x7f;ï¿½ï¿½ï¿½&#x7f;ï¿½ï¿½ï¿½&#x7f;ï¿½ï¿½ï¿½&#x7f;ï¿½ï¿½ï¿½&#x7f;ï¿½ï¿½ï¿½&#x7f;ï¿½ï¿½ï¿½&#x7f;ï¿½4ï¿½&#x0;&#x0;&#x4;&#x0;&#x0;2&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;!&#x4;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x10;&#x1c;&#x0;&#x0;&#x7;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;x&#x0;&#x0;&#x0;x&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x5;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;ï¿½ï¿½&#x12;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x5;&#x0;o&#x0;w&#x0;n&#x0;e&#x0;r&#x0;&#x6;&#x0;M&#x0; &#x0;L&#x0;o&#x0;v&#x0;e&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;@&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;&#xd;&#x0;&#x0;&#x0;&#x0;&#x0;&#xc;&#x0;&#x1;&#x0;&#xc;&#x0;&#x2;&#x0;&#xc;&#x0;&#x3;&#x0;&#xc;&#x0;&#x4;&#x0;&#xc;&#x0;&#x5;&#x0;&#xc;&#x0;&#x6;&#x0;&#xc;&#x0;&#x7;&#x0;&#xc;&#x0;&#x8;&#x0;&#xc;&#x0;	&#x0;&#xc;&#x0;&#xd;
&#x0;&#xc;&#x0;&#xb;&#x0;&#xc;&#x0;&#xc;&#x0;&#xc;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#x0;&#x0;&#x6;&#x2;&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½Oh&#x10;ï¿½ï¿½&#x8;&#x0;+&apos;ï¿½ï¿½0&#x0;&#x0;&#x0;h&#x1;&#x0;&#x0;&#x11;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x5;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x7;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;	&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x12;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;&#x0;&#x18;&#x1;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;$&#x1;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;0&#x1;&#x0;&#x0;&#xd;&#x0;&#x0;&#x0;&lt;&#x1;&#x0;&#x0;&#xe;&#x0;&#x0;&#x0;H&#x1;&#x0;&#x0;&#xf;&#x0;&#x0;&#x0;P&#x1;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;X&#x1;&#x0;&#x0;&#x13;&#x0;&#x0;&#x0;`&#x1;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;owner&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;Normal&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;M Love&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;3&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x18;&#x0;&#x0;&#x0;Microsoft Office Word&#x0;&#x0;&#x0;@&#x0;&#x0;&#x0;&#x0;Fï¿½#&#x0;&#x0;&#x0;&#x0;@&#x0;&#x0;&#x0;&#x0;ï¿½Fï¿½ï¿½ï¿½ï¿½&#x1;@&#x0;&#x0;&#x0;&#x0;bï¿½6ï¿½Tï¿½&#x1;@&#x0;&#x0;&#x0;&#x0;ï¿½Dat.ï¿½&#x1;&#x3;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;1&#x3;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;3&#x12;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½&#x0;&#x0;&#x6;&#x2;&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x2;ï¿½ï¿½Õ.&#x1b;&#x10;ï¿½ï¿½&#x8;&#x0;+,ï¿½ï¿½0&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;h&#x0;&#x0;&#x0;&#xf;&#x0;&#x0;&#x0;p&#x0;&#x0;&#x0;&#x5;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x11;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x17;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x13;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#xd;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;ï¿½&#x4;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;Toshiba&#x0;&#x3;&#x0;&#x0;&#x0;&amp;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;Z&#x15;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;&#x0;&#x0;&#xf;&#x0;&#xb;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1e;&#x10;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x0;&#xc;&#x10;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;Title&#x0;&#x3;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;&#x2;&#x0;&#x0;&#x0;&#x3;&#x0;&#x0;&#x0;&#x4;&#x0;&#x0;&#x0;&#x5;&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;&#x7;&#x0;&#x0;&#x0;&#x8;&#x0;&#x0;&#x0;	&#x0;&#x0;&#x0;&#xd;
&#x0;&#x0;&#x0;&#xb;&#x0;&#x0;&#x0;&#xc;&#x0;&#x0;&#x0;&#xd;&#x0;&#x0;&#x0;&#xe;&#x0;&#x0;&#x0;&#xf;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x11;&#x0;&#x0;&#x0;&#x12;&#x0;&#x0;&#x0;&#x13;&#x0;&#x0;&#x0;&#x14;&#x0;&#x0;&#x0;&#x15;&#x0;&#x0;&#x0;&#x16;&#x0;&#x0;&#x0;&#x17;&#x0;&#x0;&#x0;&#x18;&#x0;&#x0;&#x0;&#x19;&#x0;&#x0;&#x0;&#x1a;&#x0;&#x0;&#x0;&#x1b;&#x0;&#x0;&#x0;&#x1c;&#x0;&#x0;&#x0;&#x1d;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x1f;&#x0;&#x0;&#x0; &#x0;&#x0;&#x0;!&#x0;&#x0;&#x0;&quot;&#x0;&#x0;&#x0;#&#x0;&#x0;&#x0;$&#x0;&#x0;&#x0;%&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&apos;&#x0;&#x0;&#x0;(&#x0;&#x0;&#x0;)&#x0;&#x0;&#x0;*&#x0;&#x0;&#x0;+&#x0;&#x0;&#x0;,&#x0;&#x0;&#x0;-&#x0;&#x0;&#x0;.&#x0;&#x0;&#x0;/&#x0;&#x0;&#x0;0&#x0;&#x0;&#x0;1&#x0;&#x0;&#x0;2&#x0;&#x0;&#x0;3&#x0;&#x0;&#x0;4&#x0;&#x0;&#x0;5&#x0;&#x0;&#x0;6&#x0;&#x0;&#x0;7&#x0;&#x0;&#x0;8&#x0;&#x0;&#x0;9&#x0;&#x0;&#x0;:&#x0;&#x0;&#x0;;&#x0;&#x0;&#x0;&lt;&#x0;&#x0;&#x0;=&#x0;&#x0;&#x0;&gt;&#x0;&#x0;&#x0;?&#x0;&#x0;&#x0;@&#x0;&#x0;&#x0;A&#x0;&#x0;&#x0;B&#x0;&#x0;&#x0;C&#x0;&#x0;&#x0;D&#x0;&#x0;&#x0;E&#x0;&#x0;&#x0;F&#x0;&#x0;&#x0;G&#x0;&#x0;&#x0;H&#x0;&#x0;&#x0;I&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½K&#x0;&#x0;&#x0;L&#x0;&#x0;&#x0;M&#x0;&#x0;&#x0;N&#x0;&#x0;&#x0;O&#x0;&#x0;&#x0;P&#x0;&#x0;&#x0;Q&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½S&#x0;&#x0;&#x0;T&#x0;&#x0;&#x0;U&#x0;&#x0;&#x0;V&#x0;&#x0;&#x0;W&#x0;&#x0;&#x0;X&#x0;&#x0;&#x0;Y&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½\&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½R&#x0;o&#x0;o&#x0;t&#x0; &#x0;E&#x0;n&#x0;t&#x0;r&#x0;y&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x16;&#x0;&#x5;&#x1;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x3;&#x0;&#x0;&#x0;&#x6;	&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;F&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½k&#xd;
lt.ï¿½&#x1;^&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;D&#x0;a&#x0;t&#x0;a&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xd;
&#x0;&#x2;&#x1;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1e;&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;1&#x0;T&#x0;a&#x0;b&#x0;l&#x0;e&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xe;&#x0;&#x2;&#x1;&#x1;&#x0;&#x0;&#x0;&#x6;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&amp;&#x0;&#x0;&#x0;ï¿½G&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;W&#x0;o&#x0;r&#x0;d&#x0;D&#x0;o&#x0;c&#x0;u&#x0;m&#x0;e&#x0;n&#x0;t&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1a;&#x0;&#x2;&#x1;&#x2;&#x0;&#x0;&#x0;&#x5;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;4:&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x5;&#x0;S&#x0;u&#x0;m&#x0;m&#x0;a&#x0;r&#x0;y&#x0;I&#x0;n&#x0;f&#x0;o&#x0;r&#x0;m&#x0;a&#x0;t&#x0;i&#x0;o&#x0;n&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;(&#x0;&#x2;&#x1;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;J&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x5;&#x0;D&#x0;o&#x0;c&#x0;u&#x0;m&#x0;e&#x0;n&#x0;t&#x0;S&#x0;u&#x0;m&#x0;m&#x0;a&#x0;r&#x0;y&#x0;I&#x0;n&#x0;f&#x0;o&#x0;r&#x0;m&#x0;a&#x0;t&#x0;i&#x0;o&#x0;n&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;8&#x0;&#x2;&#x1;&#x4;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;R&#x0;&#x0;&#x0;&#x0;&#x10;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;C&#x0;o&#x0;m&#x0;p&#x0;O&#x0;b&#x0;j&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x12;&#x0;&#x2;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;r&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x1;&#x0;&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½&#x1;&#x0;ï¿½ï¿½&#x3;&#xd;
&#x0;&#x0;ï¿½ï¿½ï¿½ï¿½&#x6;	&#x2;&#x0;&#x0;&#x0;&#x0;&#x0;ï¿½&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;F &#x0;&#x0;&#x0;Microsoft Word 97-2003 Document&#x0;&#xd;
&#x0;&#x0;&#x0;MSWordDoc&#x0;&#x10;&#x0;&#x0;&#x0;Word.Document.8&#x0;ï¿½9ï¿½q&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;dropboxResumeFilePath&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;gdriveResumeFileId&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;resumeContent&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB&#xd;
Content-Disposition: form-data; name=&quot;input&quot;&#xd;
&#xd;
Next&#xd;
------WebKitFormBoundarykbjZ9qwwRDpNYJkB--&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/documents/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">&quot;D:\\JMeter5\\CPResumes\\Documents\\ProdDoc3.doc&quot;
&quot;C:\\CPResumes\\Documents\\ProdDoc3.doc&quot;

D:\\FromOldServer\\LR Scripts\\CP\\Documents\\ProdDoc3.doc</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">51160</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarykbjZ9qwwRDpNYJkB</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=09_PFTA_CP_Next2;PC=en_documents/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/documents/navigate.html" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="coverLetterContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">coverLetterContent</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="gdriveCLFileId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">gdriveCLFileId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="resumeContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">resumeContent</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="coverLetterMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">coverLetterMethod</stringProp>
                    <stringProp name="Argument.value">paste</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="resumeFile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">resumeFile</stringProp>
                    <stringProp name="Argument.value">ProdDoc2.doc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dropboxCLFilePath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dropboxCLFilePath</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="gdriveResumeFileId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">gdriveResumeFileId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dropboxResumeFilePath" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dropboxResumeFilePath</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="resumeMethod" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">resumeMethod</stringProp>
                    <stringProp name="Argument.value">upload</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="coverLetterFile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">coverLetterFile</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/documents/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryRTE4xDbmhGUGBzBl</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">75485</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=09a_PFTA_CP_Upload;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">30 to 90 second</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
              <stringProp name="RandomTimer.range">60000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_10_SuppDoc" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User Upload Support Documents (if applicable)</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/multifile/navigate.html" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;jobApplicationId&quot;&#xd;
&#xd;
0&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;documentCreatorId&quot;&#xd;
&#xd;
0&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;miscDocumentsId&quot;&#xd;
&#xd;
0&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;informationRequestBeanId&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;direction&quot;&#xd;
&#xd;
next&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;workflowIndex&quot;&#xd;
&#xd;
3&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;exitStatus&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;preview&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.title1&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;multifile1&quot;; filename=&quot;&quot;&#xd;
Content-Type: application/octet-stream&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.dropboxMultifile1&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.gdriveMultifile1&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.title2&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;multifile2&quot;; filename=&quot;&quot;&#xd;
Content-Type: application/octet-stream&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.dropboxMultifile2&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.gdriveMultifile2&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.title3&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;multifile3&quot;; filename=&quot;&quot;&#xd;
Content-Type: application/octet-stream&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.dropboxMultifile3&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;com.peopleclick.cp.unfieldeddata.gdriveMultifile3&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;deleteFileID&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4&#xd;
Content-Disposition: form-data; name=&quot;input&quot;&#xd;
&#xd;
Next&#xd;
------WebKitFormBoundarypoEFR6TmBz2nLEr4--&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/multifile/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">2701</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarypoEFR6TmBz2nLEr4</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/documents/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=10_PFTA_CP_SuppDoc;PC=multifile/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Support Document Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1560868951">candidateInformation</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/multifile/navigate.html" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.title2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.title2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="multifile2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">multifile2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.title1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.title1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="multifile1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">multifile1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.title3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.title3</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="deleteFileID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">deleteFileID</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="multifile3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">multifile3</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.dropboxMultifile1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.dropboxMultifile1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.dropboxMultifile2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.dropboxMultifile2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.dropboxMultifile3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.dropboxMultifile3</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.gdriveMultifile1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.gdriveMultifile1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.gdriveMultifile2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.gdriveMultifile2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.unfieldeddata.gdriveMultifile3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.unfieldeddata.gdriveMultifile3</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/multifile/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryNQ2hCWn8xrxQY3ly</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">12626</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=10a_PFTA_CP_SuppDoc;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_11_Review" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User review submittal information</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">145</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/multifile/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=11_PFTA_CP_Review;PC=jobApp/navigate.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">20494</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=11a_PFTA_CP_Review;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">15 to 45 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_12_Submit" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User enter EEO Informations and clicks Submit</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/submitApp.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Submit</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_RACE_TYPEID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_RACE_TYPEID</stringProp>
                    <stringProp name="Argument.value">9</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_GENDER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_GENDER</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">careers-t1.peopleclick.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/submitApp.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Host" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Connection" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="Content-Length" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">323</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/navigate.html</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=12_PFTA_CP_Submit;PC=jobApp/submitApp.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Submit Text Check" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1496030775">Thank you</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/jobApp/submitApp.html" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="preview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">preview</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="input" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">input</stringProp>
                    <stringProp name="Argument.value">Submit</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="documentCreatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">documentCreatorId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_RACE_TYPEID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_RACE_TYPEID</stringProp>
                    <stringProp name="Argument.value">,9</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="miscDocumentsId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">miscDocumentsId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="informationRequestBeanId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">informationRequestBeanId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jobApplicationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">jobApplicationId</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="workflowIndex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">workflowIndex</stringProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="exitStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">exitStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.peopleclick.cp.formdata.CAND_GENDER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.peopleclick.cp.formdata.CAND_GENDER</stringProp>
                    <stringProp name="Argument.value">,4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">next</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/jobApp/submitApp.html</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://careers-t1.peopleclick.com</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">24651</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=GENERAL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">GENERAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=12a_PFTA_CP_Submit;PC=en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">15 to 45 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PFTA_CP_13_SignOut" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">User clicks on Signout link</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/client_pfresponsivehybrid/external/registration/logout.html" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/client_pfresponsivehybrid/external/registration/logout.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=13_PFTA_CP_SignOut;PC=external/registration/logout.html</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://careers-t1.peopleclick.com/careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos?code=SEARCH" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">SEARCH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">careerscp/api/Client_PFResponsiveHybrid/external/en_US/getVideos</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="If-Modified-Since" elementType="Header">
                    <stringProp name="Header.name">If-Modified-Since</stringProp>
                    <stringProp name="Header.value">Mon, 26 Jul 1997 05:00:00 GMT</stringProp>
                  </elementProp>
                  <elementProp name="X-dynaTrace" elementType="Header">
                    <stringProp name="Header.name">X-dynaTrace</stringProp>
                    <stringProp name="Header.value">NA=13a_PFTA_CP_SignOut;PC=external/en_US/getVideos</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Random Think Time" enabled="false">
            <stringProp name="TestPlan.comments">60 - 300 seconds</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">60000</stringProp>
              <stringProp name="RandomTimer.range">240000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="false">
          <intProp name="ActionProcessor.action">0</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
          <stringProp name="FileSaver.filename"></stringProp>
          <boolProp name="FileSaver.errorsonly">true</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
          <boolProp name="FileSaver.ignoreTC">false</boolProp>
          <boolProp name="FileSaver.addTimstamp">true</boolProp>
          <stringProp name="FileSaver.variablename">C:\JMeter_5.0\CP\DEBUG</stringProp>
        </ResultSaver>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">D:\JMeter5\CPResumes\Documents</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
